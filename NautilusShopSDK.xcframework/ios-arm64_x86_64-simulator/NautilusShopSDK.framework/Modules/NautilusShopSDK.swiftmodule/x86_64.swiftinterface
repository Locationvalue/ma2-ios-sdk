// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name NautilusShopSDK
import CoreData
import CoreLocation
import Foundation
import MapKit
import NautilusAnalyticsSDK
import NautilusConfigSDK
import NautilusContainerSDK
import NautilusCoreSDK
import NautilusGeoUtilSDK
import NautilusIdentifySDK
import NautilusImagingSDK
import NautilusLoggingSDK
import NautilusUISDK
import Swift
import UIKit
import _Concurrency
@objc public protocol NautilusShopSearchTagFilteringOperation {
  @objc func transformSearchCondition(tags: [NautilusShopSDK.NautilusShopSearchTagInfo]) -> [[NautilusShopSDK.NautilusShopSearchTagInfo]]
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class NautilusShopSearchTagInfo : ObjectiveC.NSObject {
  final public let tagID: Swift.Int
  final public let parentTagID: Swift.Int
  final public let tagName: Swift.String
  final public let sortNumber: Swift.Int
  final public let alias: Swift.String
  final public let imageURL: Foundation.URL?
  @objc deinit
}
@objc public protocol NautilusShopPinImageProvider {
  @objc func provideShopPinImage(with shopInfo: NautilusShopSDK.NautilusShopInfo) -> UIKit.UIImage
}
@_hasMissingDesignatedInitializers @objc final public class NautilusShop : ObjectiveC.NSObject, NautilusCoreSDK.NautilusFeature {
  @objc public static var configFilename: Swift.String? {
    @objc get
  }
  @objc public static var componentType: NautilusContainerSDK.NautilusComponentType {
    @objc get
  }
  @objc public static var dependencies: [NautilusContainerSDK.NautilusComponentDependency] {
    @objc get
  }
  @objc final public let app: NautilusCoreSDK.NautilusApp
  @objc final public let name: Swift.String?
  final public var shopPinImageProvider: NautilusShopSDK.NautilusShopPinImageProvider?
  final public var shopSearchTagFilteringOperation: NautilusShopSDK.NautilusShopSearchTagFilteringOperation?
  @objc public static func initialize(application: NautilusCoreSDK.NautilusApp)
  @objc public static func shop() -> NautilusShopSDK.NautilusShop
  @objc(shopAppNamed:) public static func shop(appName: Swift.String) -> NautilusShopSDK.NautilusShop
  @objc final public func createShop() -> UIKit.UINavigationController
  @objc final public func instantiateFavoriteShop() -> UIKit.UIViewController
  @objc final public func instantiateShopDetail(shopID: Swift.Int) -> UIKit.UIViewController
  @objc final public func instantiateShopDetail(clientShopCode: Swift.String) -> UIKit.UIViewController
  @objc final public func instantiateShopListViewController() -> UIKit.UIViewController
  @objc final public func instantiateShopSearchListViewController() -> UIKit.UIViewController
  final public func getShopList(offset: Swift.Int?, limit: Swift.Int?, location: NautilusCoreSDK.NautilusLocation, range: Swift.Int, completion: @escaping (Swift.Result<[NautilusShopSDK.NautilusShopInfo], NautilusShopSDK.NautilusShopError>) -> Swift.Void)
  @objc final public func getShopList(offset: Swift.Int, limit: Swift.Int, location: NautilusCoreSDK.NautilusLocation, range: Swift.Int, completion: @escaping ([NautilusShopSDK.NautilusShopInfo]?, Foundation.NSError?) -> Swift.Void)
  final public func searchShop(offset: Swift.Int?, limit: Swift.Int?, location: NautilusCoreSDK.NautilusLocation?, range: Swift.Int?, shopName: Swift.String?, prefectures: [NautilusGeoUtilSDK.NautilusPrefectureCode]?, shopSearchTags: [[NautilusShopSDK.NautilusShopSearchTagInfo]]?, shopIDs: [Swift.Int]?, clientShopCDs: [Swift.String]?, completion: @escaping (Swift.Result<[NautilusShopSDK.NautilusShopInfo], NautilusShopSDK.NautilusShopError>) -> Swift.Void)
  @objc final public func searchShop(offset: Swift.Int, limit: Swift.Int, location: NautilusCoreSDK.NautilusLocation?, range: Swift.Int, shopName: Swift.String?, prefectures: [Swift.Int]?, shopSearchTags: [[NautilusShopSDK.NautilusShopSearchTagInfo]]?, shopIDs: [Swift.Int]?, clientShopCDs: [Swift.String]?, completion: @escaping ([NautilusShopSDK.NautilusShopInfo]?, Foundation.NSError?) -> Swift.Void)
  final public func getShopDetail(shopID: Swift.Int?, clientShopCD: Swift.String?, completion: @escaping (Swift.Result<NautilusShopSDK.NautilusShopInfo, NautilusShopSDK.NautilusShopError>) -> Swift.Void)
  @objc final public func getShopDetail(shopID: Swift.Int, clientShopCD: Swift.String?, completion: @escaping (NautilusShopSDK.NautilusShopInfo?, Foundation.NSError?) -> Swift.Void)
  final public func updateFavorite(addFavoriteShopIDs: [Swift.Int]?, removeFavoriteShopIDs: [Swift.Int]?, completion: @escaping (Swift.Result<Swift.Void, NautilusShopSDK.NautilusShopError>) -> Swift.Void)
  @objc final public func updateFavorite(addFavoriteShopIDs: [Swift.Int], removeFavoriteShopIDs: [Swift.Int], completion: @escaping (Swift.Bool, Foundation.NSError?) -> Swift.Void)
  final public func getFavoriteShopList(order: NautilusShopSDK.NautilusFavoriteShopSortOrder, completion: @escaping (Swift.Result<[NautilusShopSDK.NautilusShopInfo], NautilusShopSDK.NautilusShopError>) -> Swift.Void)
  @objc final public func getFavoriteShopList(order: NautilusShopSDK.NautilusFavoriteShopSortOrder, completion: @escaping ([NautilusShopSDK.NautilusShopInfo]?, Foundation.NSError?) -> Swift.Void)
  final public func getShopSearchTagList(completion: @escaping (Swift.Result<[NautilusShopSDK.NautilusShopSearchTagInfo], NautilusShopSDK.NautilusShopError>) -> Swift.Void)
  @objc final public func getShopSearchTagList(completion: @escaping ([NautilusShopSDK.NautilusShopSearchTagInfo]?, Foundation.NSError?) -> Swift.Void)
  @objc deinit
}
@objc public enum NautilusShopDetailOpenEvent : Swift.Int {
  case receivedNotification
  case openWithURL
  case tapOnShopList
  case tapOnSearchMap
  case tapOnFavoriteShopList
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum NautilusFavoriteShopSortOrder : Swift.Int {
  case ascending
  case descending
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class NautilusShopInfo : ObjectiveC.NSObject {
  final public let shopID: Swift.Int
  final public let shopType: Swift.Int
  final public let shopName: Swift.String?
  final public let openTime: Swift.String?
  final public let holiday: Swift.String?
  final public let publishStartDate: Foundation.Date
  final public let publishEndDate: Foundation.Date?
  final public let averageBudget1: Swift.String?
  final public let averageBudget2: Swift.String?
  final public let averageBudgetDisplay: Swift.String?
  final public let shopAppeal: Swift.String?
  final public let catchphrase: Swift.String?
  final public let address: Swift.String?
  final public let telephone: Swift.String?
  final public let shopLocation: CoreLocation.CLLocationCoordinate2D
  final public let shopImages: [NautilusShopSDK.NautilusShopImage]?
  final public let clientShopCD: Swift.String?
  final public let shopExternalLinks: [NautilusShopSDK.NautilusShopExternalLink]?
  final public let mobileAccess: Swift.String?
  final public let emergencyNotification: Swift.String?
  final public let distance: Swift.Double?
  final public let shopSearchTags: [Swift.Int]?
  final public let isFavorite: Swift.Bool?
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class NautilusShopExternalLink : ObjectiveC.NSObject {
  final public let linkText: Swift.String
  final public let url: Foundation.URL
  final public let sortNo: Swift.Int
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class NautilusShopImage : ObjectiveC.NSObject {
  final public let imageURL: Foundation.URL
  final public let sortNo: Swift.Int
  @objc deinit
}
public let NautilusShopErrorDomain: Swift.String
@objc public enum NautilusShopError : Swift.Int, Swift.Error {
  case unknown
  case connection
  case apiProcessError
  case httpConnection
  case parseFailure
  case userCancelled
  case invalidParamater
  case illegalConfiguration
  public var nautilusShopErrorCode: Swift.Int {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
extension NautilusShopSDK.NautilusShopDetailOpenEvent : Swift.Equatable {}
extension NautilusShopSDK.NautilusShopDetailOpenEvent : Swift.Hashable {}
extension NautilusShopSDK.NautilusShopDetailOpenEvent : Swift.RawRepresentable {}
extension NautilusShopSDK.NautilusFavoriteShopSortOrder : Swift.Equatable {}
extension NautilusShopSDK.NautilusFavoriteShopSortOrder : Swift.Hashable {}
extension NautilusShopSDK.NautilusFavoriteShopSortOrder : Swift.RawRepresentable {}
extension NautilusShopSDK.NautilusShopError : Swift.Equatable {}
extension NautilusShopSDK.NautilusShopError : Swift.Hashable {}
extension NautilusShopSDK.NautilusShopError : Swift.RawRepresentable {}
