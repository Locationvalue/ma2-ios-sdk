// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.2 effective-5.10 (swiftlang-6.2.0.19.9 clang-1700.3.19.1)
// swift-module-flags: -target x86_64-apple-ios16.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-upcoming-feature ConciseMagicFile -enable-upcoming-feature ForwardTrailingClosures -enable-upcoming-feature StrictConcurrency -enable-upcoming-feature DeprecateApplicationMain -enable-upcoming-feature ImportObjcForwardDeclarations -enable-upcoming-feature DisableOutwardActorInference -enable-upcoming-feature IsolatedDefaultValues -enable-upcoming-feature GlobalConcurrency -enable-upcoming-feature InferSendableFromCaptures -enable-upcoming-feature RegionBasedIsolation -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name NautilusCampaignSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -formal-cxx-interoperability-mode=off -interface-compiler-version 6.2
import Foundation
import NautilusConfigSDK
import NautilusContainerSDK
import NautilusCoreSDK
import NautilusIdentifySDK
import NautilusLoggingSDK
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public let NautilusCampaignErrorDomain: Swift.String
@objc public enum NautilusCampaignError : Swift.Int, Swift.Error {
  case unknown
  case connection
  case timedout
  case apiProcessError
  case httpConnection
  case parseFailure
  case userCancelled
  case invalidParamater
  case invalidInstance
  case illegalConfiguration
  case invalidParameters = 100
  case missingRequiredParameter = 101
  case unexpectedParameterFormat = 102
  case serverError = 200
  case serviceMaintenance = 901
  case unknownAPIService = 903
  case invalidUserPID = 905
  case developerError = 906
  case requiresLoginStatus = 907
  public var nautilusCampaignErrorCode: Swift.Int {
    get
  }
  #if compiler(>=5.3) && $NonescapableTypes
  public init?(rawValue: Swift.Int)
  #endif
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class NautilusCampaignInfo : ObjectiveC.NSObject {
  final public let campaignID: Swift.Int
  final public let campaignManageTitle: Swift.String
  final public let campaignTitle: Swift.String?
  final public let campaignText: Swift.String
  final public let noticeText: Swift.String?
  final public let publishStartDatetime: Foundation.Date
  final public let publishEndDatetime: Foundation.Date?
  final public let useStartDatetime: Foundation.Date?
  final public let useEndDatetime: Foundation.Date?
  final public let categoryIDList: [Swift.Int]?
  final public let sortNo: Swift.Int?
  final public let searchWord: Swift.String?
  final public let campaignImageList: [NautilusCampaignSDK.NautilusCampaignImage]?
  final public let entryDatetime: Foundation.Date?
  final public let campaignType: NautilusCampaignSDK.NautilusCampaignType
  final public let entryCount: Swift.Int?
  final public let alias: Swift.String?
  final public let campaignManageCode: Swift.String?
  final public let entryLimit: Swift.Int
  final public let isEntryLimitOver: Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class NautilusCampaignImage : ObjectiveC.NSObject {
  final public let imagePath: Swift.String?
  final public let aspectRatio: Swift.Double?
  final public let sortNo: Swift.Int?
  @objc deinit
}
@objc public enum NautilusCampaignType : Swift.Int {
  case common = 1
  case `private` = 2
  case favoriteShop = 3
  #if compiler(>=5.3) && $NonescapableTypes
  public init?(rawValue: Swift.Int)
  #endif
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class NautilusCampaignSort : ObjectiveC.NSObject {
  final public let keyName: NautilusCampaignSDK.NautilusCampaignSortKeyName
  final public let type: NautilusCampaignSDK.NautilusCampaignSortType
  public init(keyName: NautilusCampaignSDK.NautilusCampaignSortKeyName, type: NautilusCampaignSDK.NautilusCampaignSortType)
  @objc deinit
}
@objc public enum NautilusCampaignSortKeyName : Swift.Int {
  case releaseDatetime
  case closeDatetime
  case useStartDatetime
  case useEndDatetime
  case sortNumber
  #if compiler(>=5.3) && $NonescapableTypes
  public init?(rawValue: Swift.Int)
  #endif
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum NautilusCampaignSortType : Swift.Int {
  case ascending
  case descending
  #if compiler(>=5.3) && $NonescapableTypes
  public init?(rawValue: Swift.Int)
  #endif
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class NautilusCampaignCategory : ObjectiveC.NSObject {
  final public let hierarchy: Swift.Int
  final public let parentCategoryID: Swift.Int?
  final public let categoryID: Swift.Int
  final public let categoryName: Swift.String
  final public let sortNo: Swift.Int
  final public let alias: Swift.String
  @objc deinit
}
@objc public class NautilusCampaignOptionalParam : ObjectiveC.NSObject {
  final public let optionKey: Swift.String?
  final public let optionValue: Swift.String?
  #if compiler(>=5.3) && $NonescapableTypes
  public init(optionKey: Swift.String?, optionValue: Swift.String?)
  #endif
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc final public class NautilusCampaign : ObjectiveC.NSObject, NautilusCoreSDK.NautilusFeature {
  #if compiler(>=5.3) && $NonescapableTypes
  @objc public static var configFilename: Swift.String? {
    @objc get
  }
  #endif
  @objc public static var componentType: NautilusContainerSDK.NautilusComponentType {
    @objc get
  }
  @objc public static var dependencies: [NautilusContainerSDK.NautilusComponentDependency] {
    @objc get
  }
  @objc final public let app: NautilusCoreSDK.NautilusApp
  @objc final public let name: Swift.String?
  @objc final public var featureStatus: NautilusCoreSDK.NautilusFeatureStatus {
    @objc get
  }
  @objc public static func initialize(application: NautilusCoreSDK.NautilusApp, completion: @escaping NautilusCoreSDK.NautilusFeatureInitializationCompletion)
  @objc public static func campaign() -> NautilusCampaignSDK.NautilusCampaign
  @objc(campaignAppNamed:) public static func campaign(appName: Swift.String) -> NautilusCampaignSDK.NautilusCampaign
  #if compiler(>=5.3) && $NonescapableTypes
  final public func getCommonCampaignList(campaignIdList: [Swift.Int]?, lastCheckDatetime: Foundation.Date?, keyword: Swift.String?, categoryIdList: [Swift.Int]?, limit: Swift.Int?, offset: Swift.Int?, useCache: Swift.Bool?, sort: NautilusCampaignSDK.NautilusCampaignSort?, completion: @escaping (Swift.Result<[NautilusCampaignSDK.NautilusCampaignInfo], NautilusCampaignSDK.NautilusCampaignError>) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  final public func getCommonCampaignList(campaignIdList: [Swift.Int]?, lastCheckDatetime: Foundation.Date?, keyword: Swift.String?, categoryIdList: [Swift.Int]?, limit: Swift.Int?, offset: Swift.Int?, useCache: Swift.Bool?, sort: NautilusCampaignSDK.NautilusCampaignSort?, completion: @escaping ([NautilusCampaignSDK.NautilusCampaignInfo]?, Foundation.NSError?) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  final public func getCommonCampaignCount(lastCheckDatetime: Foundation.Date?, completion: @escaping (Swift.Result<Swift.Int, NautilusCampaignSDK.NautilusCampaignError>) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  final public func getCommonCampaignCount(lastCheckDatetime: Foundation.Date?, completion: @escaping (Swift.Int, Foundation.NSError?) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  final public func getPrivateCampaignList(campaignIdList: [Swift.Int]?, lastCheckDatetime: Foundation.Date?, keyword: Swift.String?, categoryIdList: [Swift.Int]?, limit: Swift.Int?, offset: Swift.Int?, useCache: Swift.Bool?, sort: NautilusCampaignSDK.NautilusCampaignSort?, completion: @escaping (Swift.Result<[NautilusCampaignSDK.NautilusCampaignInfo], NautilusCampaignSDK.NautilusCampaignError>) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  final public func getPrivateCampaignList(campaignIdList: [Swift.Int]?, lastCheckDatetime: Foundation.Date?, keyword: Swift.String?, categoryIdList: [Swift.Int]?, limit: Swift.Int?, offset: Swift.Int?, useCache: Swift.Bool?, sort: NautilusCampaignSDK.NautilusCampaignSort?, completion: @escaping ([NautilusCampaignSDK.NautilusCampaignInfo]?, Foundation.NSError?) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  final public func getPrivateCampaignCount(lastCheckDatetime: Foundation.Date?, completion: @escaping (Swift.Result<Swift.Int, NautilusCampaignSDK.NautilusCampaignError>) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  final public func getPrivateCampaignCount(lastCheckDatetime: Foundation.Date?, completion: @escaping (Swift.Int, Foundation.NSError?) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  final public func getFavoriteShopCampaignList(campaignIdList: [Swift.Int]?, lastCheckDatetime: Foundation.Date?, keyword: Swift.String?, categoryIdList: [Swift.Int]?, limit: Swift.Int?, offset: Swift.Int?, useCache: Swift.Bool?, sort: NautilusCampaignSDK.NautilusCampaignSort?, completion: @escaping (Swift.Result<[NautilusCampaignSDK.NautilusCampaignInfo], NautilusCampaignSDK.NautilusCampaignError>) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  final public func getFavoriteShopCampaignList(campaignIdList: [Swift.Int]?, lastCheckDatetime: Foundation.Date?, keyword: Swift.String?, categoryIdList: [Swift.Int]?, limit: Swift.Int?, offset: Swift.Int?, useCache: Swift.Bool?, sort: NautilusCampaignSDK.NautilusCampaignSort?, completion: @escaping ([NautilusCampaignSDK.NautilusCampaignInfo]?, Foundation.NSError?) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  final public func getFavoriteShopCampaignCount(lastCheckDatetime: Foundation.Date?, completion: @escaping (Swift.Result<Swift.Int, NautilusCampaignSDK.NautilusCampaignError>) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  final public func getFavoriteShopCampaignCount(lastCheckDatetime: Foundation.Date?, completion: @escaping (Swift.Int, Foundation.NSError?) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  final public func registerCampaign(campaignID: Swift.Int, optionalParamList: [NautilusCampaignSDK.NautilusCampaignOptionalParam]?, campaignType: NautilusCampaignSDK.NautilusCampaignType, completion: @escaping (Swift.Result<Swift.Void, NautilusCampaignSDK.NautilusCampaignError>) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  final public func registerCampaign(campaignID: Swift.Int, optionalParamList: [NautilusCampaignSDK.NautilusCampaignOptionalParam]?, campaignType: NautilusCampaignSDK.NautilusCampaignType, completion: @escaping (Swift.Bool, Foundation.NSError?) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  final public func getCampaignCategoryList(completion: @escaping (Swift.Result<[NautilusCampaignSDK.NautilusCampaignCategory], NautilusCampaignSDK.NautilusCampaignError>) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  final public func getCampaignCategoryList(completion: @escaping ([NautilusCampaignSDK.NautilusCampaignCategory]?, Foundation.NSError?) -> Swift.Void)
  #endif
  @objc deinit
}
extension NautilusCampaignSDK.NautilusCampaignError : Swift.Equatable {}
extension NautilusCampaignSDK.NautilusCampaignError : Swift.Hashable {}
extension NautilusCampaignSDK.NautilusCampaignError : Swift.RawRepresentable {}
extension NautilusCampaignSDK.NautilusCampaignType : Swift.Equatable {}
extension NautilusCampaignSDK.NautilusCampaignType : Swift.Hashable {}
extension NautilusCampaignSDK.NautilusCampaignType : Swift.RawRepresentable {}
extension NautilusCampaignSDK.NautilusCampaignSortKeyName : Swift.Equatable {}
extension NautilusCampaignSDK.NautilusCampaignSortKeyName : Swift.Hashable {}
extension NautilusCampaignSDK.NautilusCampaignSortKeyName : Swift.RawRepresentable {}
extension NautilusCampaignSDK.NautilusCampaignSortType : Swift.Equatable {}
extension NautilusCampaignSDK.NautilusCampaignSortType : Swift.Hashable {}
extension NautilusCampaignSDK.NautilusCampaignSortType : Swift.RawRepresentable {}
