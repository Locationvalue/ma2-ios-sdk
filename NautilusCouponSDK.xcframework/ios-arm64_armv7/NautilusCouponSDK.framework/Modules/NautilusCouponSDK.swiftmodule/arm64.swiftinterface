// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name NautilusCouponSDK
import Foundation
import NautilusAnalyticsSDK
import NautilusConfigSDK
import NautilusContainerSDK
import NautilusCoreSDK
import NautilusIdentifySDK
import NautilusImagingSDK
import NautilusLoggingSDK
import NautilusUISDK
import SafariServices
import Swift
import UIKit
@objc public class NautilusCouponUseInfo : ObjectiveC.NSObject {
  public init(coupon: NautilusCouponSDK.NautilusCouponInfo)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class NautilusCouponInfo : ObjectiveC.NSObject {
  final public let couponID: Swift.Int
  final public let couponManageTitle: Swift.String
  final public let couponTitle: Swift.String?
  final public let couponText: Swift.String
  final public let noticeText: Swift.String?
  final public let publishStartDate: Foundation.Date
  final public let publishEndDate: Foundation.Date?
  final public let useStartDate: Foundation.Date?
  final public let useEndDate: Foundation.Date?
  final public let barcode: Swift.String?
  final public let barcodeImageURL: Foundation.URL?
  final public let couponCode: Swift.String?
  final public let maxSheet: Swift.Int?
  final public let useType: NautilusCouponSDK.NautilusCouponExchangeType?
  final public let useLimitHour: Swift.Int?
  final public let categoryIDs: [Swift.Int]?
  final public let sortNo: Swift.Int?
  final public let couponImages: [NautilusCouponSDK.NautilusCouponImageInfo]?
  final public let useDate: Foundation.Date?
  final public let couponType: NautilusCouponSDK.NautilusCouponPublishType?
  final public let isFavorited: Swift.Bool?
  final public let useCount: Swift.Int?
  final public let exchangeID: Swift.Int?
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class NautilusCouponImageInfo : ObjectiveC.NSObject {
  final public let url: Foundation.URL
  final public let aspectRatio: Swift.Double
  final public let sortNo: Swift.Int
  @objc deinit
}
@_inheritsConvenienceInitializers final public class NautilusCouponTabViewController : NautilusUISDK.NautilusAppTopBarController, NautilusUISDK.NautilusAppTopBarControllerDelegate {
  @objc override final public func viewDidLoad()
  @objc override final public func appTopBar(_ appTopBar: NautilusUISDK.NautilusAppTopBar, viewForItemAt index: Swift.Int) -> NautilusUISDK.NautilusAppTopBarItemView
  @objc override final public func numberOfItems(in appTopBar: NautilusUISDK.NautilusAppTopBar) -> Swift.Int
  @objc final public func numberOfViewControllers(_ appTopBarController: NautilusUISDK.NautilusAppTopBarController) -> Swift.Int
  @objc final public func appTopBarController(_ appTopBarController: NautilusUISDK.NautilusAppTopBarController, viewControllerAt index: Swift.Int) -> UIKit.UIViewController
  @objc final public func appTopBarController(_ appTopBarController: NautilusUISDK.NautilusAppTopBarController, indexOfViewController viewController: UIKit.UIViewController) -> Swift.Int
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class NautilusCouponPublishTrigger : ObjectiveC.NSObject {
  final public let publishTriggerType: NautilusCouponSDK.NautilusCouponPublishTriggerType
  final public let codeText: Swift.String?
  final public let cardNumber: Swift.String?
  final public let cardType: Swift.Int?
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum NautilusCouponPublishTriggerType : Swift.Int {
  case initialMemberRegistration
  case appDownload
  case memberCardRegistration
  case couponCode
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class NautilusCouponCategoryInfo : ObjectiveC.NSObject {
  final public let categoryID: Swift.Int
  final public let parentCategoryID: Swift.Int
  final public let categoryName: Swift.String
  final public let sortNumber: Swift.Int
  final public let alias: Swift.String
  @objc deinit
}
public let NautilusCouponErrorDomain: Swift.String
@objc public enum NautilusCouponError : Swift.Int, Swift.Error {
  case unknown
  case connection
  case apiProcessError
  case httpConnection
  case parseFailure
  case userCancelled
  case invalidParamater
  public var nautilusCouponErrorCode: Swift.Int {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc final public class NautilusCoupon : ObjectiveC.NSObject, NautilusCoreSDK.NautilusFeature {
  @objc public static var configFilename: Swift.String {
    @objc get
  }
  @objc public static var componentType: NautilusContainerSDK.NautilusComponentType {
    @objc get
  }
  @objc public static var dependencies: [NautilusContainerSDK.NautilusComponentDependency] {
    @objc get
  }
  @objc final public let app: NautilusCoreSDK.NautilusApp
  @objc final public let name: Swift.String?
  @objc public static func initialize(application: NautilusCoreSDK.NautilusApp)
  @objc public static func coupon() -> NautilusCouponSDK.NautilusCoupon
  @objc(couponAppNamed:) public static func coupon(appName: Swift.String) -> NautilusCouponSDK.NautilusCoupon
  @objc final public func instantiateCouponListViewController() -> UIKit.UIViewController
  @objc final public func instantiateFavoriteCouponListViewController() -> UIKit.UIViewController
  @objc final public func instantiateCouponDetailViewController(couponID: Swift.Int, couponType: NautilusCouponSDK.NautilusCouponPublishType) -> UIKit.UIViewController
  @objc override dynamic public init()
  @objc deinit
}
extension NautilusCoupon {
  final public func getCommonCouponList(offset: Swift.Int?, limit: Swift.Int?, useCache: Swift.Bool?, couponIDs: [Swift.Int]?, categoryIDs: [Swift.Int]?, sortKeys: [NautilusCouponSDK.NautilusCouponSortKey]?, checkDateTime: Foundation.Date?, completion: @escaping (Swift.Result<[NautilusCouponSDK.NautilusCouponInfo], NautilusCouponSDK.NautilusCouponError>) -> Swift.Void)
  @objc final public func getCommonCouponList(offset: Swift.Int, limit: Swift.Int, useCache: Swift.Bool, couponIDs: [Swift.Int]?, categoryIDs: [Swift.Int]?, sortKeys: [NautilusCouponSDK.NautilusCouponSortKey]?, checkDateTime: Foundation.Date?, completion: @escaping ([NautilusCouponSDK.NautilusCouponInfo]?, Foundation.NSError?) -> Swift.Void)
  final public func getCommonCouponCount(checkDateTime: Foundation.Date?, completion: @escaping (Swift.Result<Swift.Int, NautilusCouponSDK.NautilusCouponError>) -> Swift.Void)
  @objc final public func getCommonCouponCount(checkDateTime: Foundation.Date?, completion: @escaping (Swift.Int, Foundation.NSError?) -> Swift.Void)
  final public func getPrivateCouponList(offset: Swift.Int?, limit: Swift.Int?, useCache: Swift.Bool?, couponIDs: [Swift.Int]?, categoryIDs: [Swift.Int]?, sortKeys: [NautilusCouponSDK.NautilusCouponSortKey]?, checkDateTime: Foundation.Date?, completion: @escaping (Swift.Result<[NautilusCouponSDK.NautilusCouponInfo], NautilusCouponSDK.NautilusCouponError>) -> Swift.Void)
  @objc final public func getPrivateCouponList(offset: Swift.Int, limit: Swift.Int, useCache: Swift.Bool, couponIDs: [Swift.Int]?, categoryIDs: [Swift.Int]?, sortKeys: [NautilusCouponSDK.NautilusCouponSortKey]?, checkDateTime: Foundation.Date?, completion: @escaping ([NautilusCouponSDK.NautilusCouponInfo]?, Foundation.NSError?) -> Swift.Void)
  final public func getPrivateCouponCount(checkDateTime: Foundation.Date?, completion: @escaping (Swift.Result<Swift.Int, NautilusCouponSDK.NautilusCouponError>) -> Swift.Void)
  @objc final public func getPrivateCouponCount(checkDateTime: Foundation.Date?, completion: @escaping (Swift.Int, Foundation.NSError?) -> Swift.Void)
  final public func getFavoriteShopCouponList(offset: Swift.Int?, limit: Swift.Int?, useCache: Swift.Bool?, couponIDs: [Swift.Int]?, categoryIDs: [Swift.Int]?, sortKeys: [NautilusCouponSDK.NautilusCouponSortKey]?, checkDateTime: Foundation.Date?, completion: @escaping (Swift.Result<[NautilusCouponSDK.NautilusCouponInfo], NautilusCouponSDK.NautilusCouponError>) -> Swift.Void)
  @objc final public func getFavoriteShopCouponList(offset: Swift.Int, limit: Swift.Int, useCache: Swift.Bool, couponIDs: [Swift.Int]?, categoryIDs: [Swift.Int]?, sortKeys: [NautilusCouponSDK.NautilusCouponSortKey]?, checkDateTime: Foundation.Date?, completion: @escaping ([NautilusCouponSDK.NautilusCouponInfo]?, Foundation.NSError?) -> Swift.Void)
  final public func getFavoriteShopCouponCount(checkDateTime: Foundation.Date?, completion: @escaping (Swift.Result<Swift.Int, NautilusCouponSDK.NautilusCouponError>) -> Swift.Void)
  @objc final public func getFavoriteShopCouponCount(checkDateTime: Foundation.Date?, completion: @escaping (Swift.Int, Foundation.NSError?) -> Swift.Void)
  final public func getPrizeCouponList(offset: Swift.Int?, limit: Swift.Int?, useCache: Swift.Bool?, couponIDs: [Swift.Int]?, categoryIDs: [Swift.Int]?, sortKeys: [NautilusCouponSDK.NautilusCouponSortKey]?, checkDateTime: Foundation.Date?, exchangeID: Swift.Int?, completion: @escaping (Swift.Result<[NautilusCouponSDK.NautilusCouponInfo], NautilusCouponSDK.NautilusCouponError>) -> Swift.Void)
  @objc final public func getPrizeCouponList(offset: Swift.Int, limit: Swift.Int, useCache: Swift.Bool, couponIDs: [Swift.Int]?, categoryIDs: [Swift.Int]?, sortKeys: [NautilusCouponSDK.NautilusCouponSortKey]?, checkDateTime: Foundation.Date?, exchangeID: Swift.Int, completion: @escaping ([NautilusCouponSDK.NautilusCouponInfo]?, Foundation.NSError?) -> Swift.Void)
  final public func getPrizeCouponCount(checkDateTime: Foundation.Date?, completion: @escaping (Swift.Result<Swift.Int, NautilusCouponSDK.NautilusCouponError>) -> Swift.Void)
  @objc final public func getPrizeCouponCount(checkDateTime: Foundation.Date?, completion: @escaping (Swift.Int, Foundation.NSError?) -> Swift.Void)
  final public func useCoupon(targetCouponInfo: NautilusCouponSDK.NautilusCouponUseInfo, optionalParameters: [Swift.String : Swift.String]?, completion: @escaping (Swift.Result<Swift.Void, NautilusCouponSDK.NautilusCouponError>) -> Swift.Void)
  @objc final public func useCoupon(targetCouponInfo: NautilusCouponSDK.NautilusCouponUseInfo, optionalParameters: [Swift.String : Swift.String]?, completion: @escaping (Swift.Bool, Foundation.NSError?) -> Swift.Void)
  final public func useCoupons(couponUseInfoList: [NautilusCouponSDK.NautilusCouponUseInfo], optionalParameters: [Swift.String : Swift.String]?, completion: @escaping (Swift.Result<Swift.Void, NautilusCouponSDK.NautilusCouponError>) -> Swift.Void)
  @objc final public func useCoupons(couponUseInfoList: [NautilusCouponSDK.NautilusCouponUseInfo], optionalParameters: [Swift.String : Swift.String]?, completion: @escaping (Swift.Bool, Foundation.NSError?) -> Swift.Void)
  final public func updateFavorite(addFavoriteCouponIDs: [Swift.Int]?, removeFavoriteCouponIDs: [Swift.Int]?, completion: @escaping (Swift.Result<Swift.Void, NautilusCouponSDK.NautilusCouponError>) -> Swift.Void)
  @objc final public func updateFavorite(addFavoriteCouponIDs: [Swift.Int]?, removeFavoriteCouponIDs: [Swift.Int]?, completion: @escaping (Swift.Bool, Foundation.NSError?) -> Swift.Void)
  final public func getFavoriteCouponList(completion: @escaping (Swift.Result<[NautilusCouponSDK.NautilusCouponInfo], NautilusCouponSDK.NautilusCouponError>) -> Swift.Void)
  @objc final public func getFavoriteCouponList(completion: @escaping ([NautilusCouponSDK.NautilusCouponInfo]?, Foundation.NSError?) -> Swift.Void)
  final public func getCouponCategoryList(completion: @escaping (Swift.Result<[NautilusCouponSDK.NautilusCouponCategoryInfo], NautilusCouponSDK.NautilusCouponError>) -> Swift.Void)
  @objc final public func getCouponCategoryList(completion: @escaping ([NautilusCouponSDK.NautilusCouponCategoryInfo]?, Foundation.NSError?) -> Swift.Void)
  final public func publishPrizeCoupon(trigger: NautilusCouponSDK.NautilusCouponPublishTrigger, completion: @escaping (Swift.Result<Swift.Void, NautilusCouponSDK.NautilusCouponError>) -> Swift.Void)
  @objc final public func publishPrizeCoupon(trigger: NautilusCouponSDK.NautilusCouponPublishTrigger, completion: @escaping (Swift.Bool, Foundation.NSError?) -> Swift.Void)
  final public func sendCouponLog(couponLogs: [NautilusCouponSDK.NautilusCouponLog], completion: @escaping (Swift.Result<Swift.Void, NautilusCouponSDK.NautilusCouponError>) -> Swift.Void)
  @objc final public func sendCouponLog(couponLogs: [NautilusCouponSDK.NautilusCouponLog], completion: @escaping (Swift.Bool, Foundation.NSError?) -> Swift.Void)
}
@_hasMissingDesignatedInitializers @objc public class NautilusCouponLog : ObjectiveC.NSObject {
  final public let coupon: NautilusCouponSDK.NautilusCouponInfo
  final public let logDate: Foundation.Date
  final public let logType: NautilusCouponSDK.NautilusCouponLogType
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum NautilusCouponLogType : Swift.Int {
  case viewCoupon
  case tapCouponURL
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class NautilusCouponSortKey : ObjectiveC.NSObject {
  final public let keyName: NautilusCouponSDK.NautilusCouponSortKeyName
  final public let order: NautilusCouponSDK.NautilusCouponSortKeyOrder
  public init(keyName: NautilusCouponSDK.NautilusCouponSortKeyName, order: NautilusCouponSDK.NautilusCouponSortKeyOrder)
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum NautilusCouponSortKeyName : Swift.Int {
  case publishStartDateTime
  case publishEndDateTime
  case useStartDateTime
  case useEndDateTime
  case sortNumber
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum NautilusCouponSortKeyOrder : Swift.Int {
  case ascending
  case descending
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc open class NautilusCouponBaseCell : UIKit.UICollectionViewCell {
  open class var defaultCellIdentifier: Swift.String {
    get
  }
  open class var nib: UIKit.UINib {
    get
  }
  open class func register(to collectionView: UIKit.UICollectionView)
  @objc @IBOutlet weak public var couponCoverImageView: UIKit.UIImageView!
  @objc @IBOutlet weak public var couponTitleLabel: UIKit.UILabel!
  @objc @IBOutlet weak public var couponExpirePeriodLabel: UIKit.UILabel!
  @objc @IBOutlet weak public var couponFavoriteButton: UIKit.UIButton!
  @objc @IBOutlet weak public var couponCoverImageOverlayView: UIKit.UIView!
  @objc @IBOutlet weak public var couponCoverImageOverlayImageView: UIKit.UIImageView!
  weak public var actionHandler: NautilusCouponSDK.NautilusCouponCellActionHandler?
  final public let imageDownloader: NautilusImagingSDK.NautilusImageDownloader
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public protocol NautilusCouponCellActionHandler {
  @objc func addFavorite(coupon: NautilusCouponSDK.NautilusCouponInfo)
  @objc func removeFavorite(coupon: NautilusCouponSDK.NautilusCouponInfo)
  @objc func showCouponUseCondition(couponID: Swift.Int)
  @objc func useCoupon(couponID: Swift.Int)
  @objc func toggleCouponUseView(cell: NautilusCouponSDK.NautilusCouponBaseCell, couponID: Swift.Int)
}
@objc public class NautilusCouponData : ObjectiveC.NSObject {
  final public let couponID: Swift.Int
  final public let couponManageTitle: Swift.String
  final public let couponTitle: Swift.String?
  final public let couponText: Swift.String
  final public let noticeText: Swift.String?
  final public let publishStartDatetime: Swift.String
  final public let publishEndDatetime: Swift.String?
  final public let useStartDatetime: Swift.String?
  final public let useEndDatetime: Swift.String?
  final public let barcode: Swift.String?
  final public let barcodeImagePath: Swift.String?
  final public let couponCode: Swift.String?
  final public let maxSheet: Swift.Int?
  final public let useType: NautilusCouponSDK.NautilusAppExchangeType?
  final public let useLimit: Swift.Int?
  final public let categoryIDs: [Swift.Int]?
  final public let sortNo: Swift.Int?
  final public let searchword: Swift.String?
  final public let couponImageList: [NautilusCouponSDK.CustomCellCouponImageList]?
  final public let useDatetime: Swift.String?
  final public let couponType: Swift.Int?
  final public let favorite: Swift.Bool?
  final public let useCount: Swift.Int?
  final public let exchangeID: Swift.Int?
  public init(couponID: Swift.Int, couponManageTitle: Swift.String, couponTitle: Swift.String?, couponText: Swift.String, noticeText: Swift.String?, publishStartDatetime: Swift.String, publishEndDatetime: Swift.String?, useStartDatetime: Swift.String?, useEndDatetime: Swift.String?, barcode: Swift.String?, barcodeImagePath: Swift.String?, couponCode: Swift.String?, maxSheet: Swift.Int?, useType: NautilusCouponSDK.NautilusAppExchangeType?, useLimit: Swift.Int?, categoryIDs: [Swift.Int]?, sortNo: Swift.Int?, searchword: Swift.String?, couponImageList: [NautilusCouponSDK.CustomCellCouponImageList]?, useDatetime: Swift.String?, couponType: Swift.Int?, favorite: Swift.Bool?, useCount: Swift.Int?, exchangeID: Swift.Int?)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class CustomCellCouponImageList : ObjectiveC.NSObject {
  final public let imagePath: Swift.String
  final public let aspectRatio: Swift.Double
  final public let sortNo: Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum NautilusCouponPublishType : Swift.Int {
  case common = 1
  case `private` = 2
  case shop = 3
  case prize = 4
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum PublishTiming : Swift.Int {
  case firstRegister = 1
  case firstDownload = 2
  case cardPublication = 3
  case codePublication = 4
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class CardType : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum SectionType : Swift.Int {
  case useStatus
  case none
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class NautilusAppExchangeType : ObjectiveC.NSObject {
  final public let notExchange: Swift.Int?
  final public let exchange: Swift.Int?
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum NautilusCouponExchangeType : Swift.Int {
  case exchange = 1
  case notExchange = 0
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class _NautilusCouponConfig : ObjectiveC.NSObject {
  public var noneCategorySetting: NautilusUISDK.NoneCategory?
  public var loadingText: Swift.String?
  public var categoryTextColor: UIKit.UIColor?
  public var categoryCellColor: UIKit.UIColor?
  public var categoryCellWidth: NautilusUISDK.CellWidth?
  public var hasDetailView: NautilusUISDK.TransitionStyle?
  public var contentsColumn: NautilusUISDK.ContentsColumn?
  public var cellClass: NautilusCouponSDK.NautilusCouponBaseCell.Type?
  public var sectionText: [Swift.String]?
  public var sectionType: NautilusCouponSDK.SectionType
  public var zeroImage: UIKit.UIImage?
  public var zeroText: Swift.String?
  public var errorImage: UIKit.UIImage?
  public var errorText: Swift.String?
  public var errorButtonTitle: Swift.String?
  @objc public static var shared: NautilusCouponSDK._NautilusCouponConfig {
    @objc get
  }
  @objc public func initialize(noneCategorySetting: NautilusUISDK.NoneCategory, loadingText: Swift.String?, categoryTextColor: UIKit.UIColor?, categoryCellColor: UIKit.UIColor?, categoryCellWidth: NautilusUISDK.CellWidth?, hasDetailView: NautilusUISDK.TransitionStyle, contentsColumn: NautilusUISDK.ContentsColumn, cellClass: NautilusCouponSDK.NautilusCouponBaseCell.Type?, sectionType: NautilusCouponSDK.SectionType, sectionText: [Swift.String]?, zeroImage: UIKit.UIImage?, zeroText: Swift.String?, errorImage: UIKit.UIImage?, errorText: Swift.String?, errorButtonTitle: Swift.String?) -> NautilusCouponSDK._NautilusCouponConfig
  @objc deinit
}
extension NautilusCouponSDK.NautilusCouponPublishTriggerType : Swift.Equatable {}
extension NautilusCouponSDK.NautilusCouponPublishTriggerType : Swift.Hashable {}
extension NautilusCouponSDK.NautilusCouponPublishTriggerType : Swift.RawRepresentable {}
extension NautilusCouponSDK.NautilusCouponError : Swift.Equatable {}
extension NautilusCouponSDK.NautilusCouponError : Swift.Hashable {}
extension NautilusCouponSDK.NautilusCouponError : Swift.RawRepresentable {}
extension NautilusCouponSDK.NautilusCouponLogType : Swift.Equatable {}
extension NautilusCouponSDK.NautilusCouponLogType : Swift.Hashable {}
extension NautilusCouponSDK.NautilusCouponLogType : Swift.RawRepresentable {}
extension NautilusCouponSDK.NautilusCouponSortKeyName : Swift.Equatable {}
extension NautilusCouponSDK.NautilusCouponSortKeyName : Swift.Hashable {}
extension NautilusCouponSDK.NautilusCouponSortKeyName : Swift.RawRepresentable {}
extension NautilusCouponSDK.NautilusCouponSortKeyOrder : Swift.Equatable {}
extension NautilusCouponSDK.NautilusCouponSortKeyOrder : Swift.Hashable {}
extension NautilusCouponSDK.NautilusCouponSortKeyOrder : Swift.RawRepresentable {}
extension NautilusCouponSDK.NautilusCouponPublishType : Swift.Equatable {}
extension NautilusCouponSDK.NautilusCouponPublishType : Swift.Hashable {}
extension NautilusCouponSDK.NautilusCouponPublishType : Swift.RawRepresentable {}
extension NautilusCouponSDK.PublishTiming : Swift.Equatable {}
extension NautilusCouponSDK.PublishTiming : Swift.Hashable {}
extension NautilusCouponSDK.PublishTiming : Swift.RawRepresentable {}
extension NautilusCouponSDK.SectionType : Swift.Equatable {}
extension NautilusCouponSDK.SectionType : Swift.Hashable {}
extension NautilusCouponSDK.SectionType : Swift.RawRepresentable {}
extension NautilusCouponSDK.NautilusCouponExchangeType : Swift.Equatable {}
extension NautilusCouponSDK.NautilusCouponExchangeType : Swift.Hashable {}
extension NautilusCouponSDK.NautilusCouponExchangeType : Swift.RawRepresentable {}
