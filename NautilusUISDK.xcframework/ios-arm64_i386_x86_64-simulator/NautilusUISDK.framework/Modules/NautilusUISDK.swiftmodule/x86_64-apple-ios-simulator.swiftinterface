// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target x86_64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name NautilusUISDK
import Foundation
import NautilusCoreSDK
import NautilusLoggingSDK
import Swift
import UIKit
import WebKit
import _Concurrency
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class MACellLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class MASubCellLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class MACellButton : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) public var insets: UIKit.UIEdgeInsets
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func point(inside point: CoreGraphics.CGPoint, with event: UIKit.UIEvent?) -> Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class NautilusAppTabViewCell : UIKit.UICollectionViewCell {
  @_Concurrency.MainActor(unsafe) public var cellNameLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) public var selectedBar: UIKit.UIView
  @_Concurrency.MainActor(unsafe) public var isActiveCell: Swift.Bool?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isSelected: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func preferredLayoutAttributesFitting(_ layoutAttributes: UIKit.UICollectionViewLayoutAttributes) -> UIKit.UICollectionViewLayoutAttributes
  @_Concurrency.MainActor(unsafe) public func setUpContents(textName: Swift.String, textColor: UIKit.UIColor?, cellBackgroundColor: UIKit.UIColor?, width: NautilusUISDK.CategoryCellWidth?)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class NautilusDropdownGroup : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) weak public var dataSource: NautilusUISDK.NautilusDropdownGroupDataSource?
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: NautilusUISDK.NautilusDropdownGroupDelegate?
  @objc @_Concurrency.MainActor(unsafe) public var dropdownGroupTitle: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var selectedIndex: Swift.Int {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc @_Concurrency.MainActor(unsafe) public func selectItem(at index: Swift.Int)
  @objc deinit
}
@objc public protocol NautilusDropdownGroupDataSource {
  @objc func numberOfDropdownItems(_ dropdownGroup: NautilusUISDK.NautilusDropdownGroup) -> Swift.Int
  @objc func dropdownItemTitle(_ dropdownGroup: NautilusUISDK.NautilusDropdownGroup, at index: Swift.Int) -> Swift.String
}
@objc public protocol NautilusDropdownGroupDelegate {
  @objc func dropdownGroup(_ dropdownGroup: NautilusUISDK.NautilusDropdownGroup, didSelect index: Swift.Int)
  @objc func dropdownGroup(_ dropdownGroup: NautilusUISDK.NautilusDropdownGroup, actionSheet: UIKit.UIAlertController)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class NautilusAppPageViewController : UIKit.UIPageViewController {
  @_Concurrency.MainActor(unsafe) public var childVC: [UIKit.UIViewController]?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(transitionStyle style: UIKit.UIPageViewController.TransitionStyle, navigationOrientation: UIKit.UIPageViewController.NavigationOrientation, options: [UIKit.UIPageViewController.OptionsKey : Any]? = nil)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension NautilusUISDK.NautilusAppPageViewController : UIKit.UIPageViewControllerDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func pageViewController(_ pageViewController: UIKit.UIPageViewController, viewControllerBefore viewController: UIKit.UIViewController) -> UIKit.UIViewController?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func pageViewController(_ pageViewController: UIKit.UIPageViewController, viewControllerAfter viewController: UIKit.UIViewController) -> UIKit.UIViewController?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func presentationCount(for pageViewController: UIKit.UIPageViewController) -> Swift.Int
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class NautilusInAppWebBrowserViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public init(linkURL: Foundation.URL, title: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @objc deinit
}
extension NautilusUISDK.NautilusInAppWebBrowserViewController : WebKit.WKUIDelegate {
}
extension NautilusUISDK.NautilusInAppWebBrowserViewController : WebKit.WKNavigationDelegate {
}
public struct NautilusUIUtil {
  public static func htmlToAttributedString(htmlString: Swift.String, family: Swift.String, point: Swift.String, weight: Swift.String, hexColor: Swift.String) -> Foundation.NSAttributedString?
  public static func createActivityIndicator(viewWidth: CoreGraphics.CGFloat, viewHeight: CoreGraphics.CGFloat, text: Swift.String?) -> NautilusUISDK.ActivityStackView
  public static func rowHeight(font: UIKit.UIFont, row: Swift.Int) -> CoreGraphics.CGFloat
  public static func rawRect(font: UIKit.UIFont, text: Swift.String) -> CoreGraphics.CGRect
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var parentViewController: UIKit.UIViewController? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ActivityStackView : UIKit.UIStackView {
  @_Concurrency.MainActor(unsafe) public var indicatorView: UIKit.UIActivityIndicatorView?
  @_Concurrency.MainActor(unsafe) public var activityLabel: UIKit.UILabel?
  @objc deinit
}
extension UIKit.UIColor {
  convenience public init(hexCode: Swift.String)
  convenience public init(hex: Swift.String, alpha: CoreGraphics.CGFloat = 1.0)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class NautilusAppTabView : UIKit.UICollectionView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect, collectionViewLayout layout: UIKit.UICollectionViewLayout)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public protocol NautilusAppTopBarDelegate {
  @objc func appTopBar(_ appTopBar: NautilusUISDK.NautilusAppTopBar, didSelectedAt index: Swift.Int)
}
@objc public protocol NautilusAppTopBarDataSource {
  @objc func numberOfItems(in appTopBar: NautilusUISDK.NautilusAppTopBar) -> Swift.Int
  @objc func appTopBar(_ appTopBar: NautilusUISDK.NautilusAppTopBar, viewForItemAt index: Swift.Int) -> NautilusUISDK.NautilusAppTopBarItemView
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class NautilusAppTopBar : UIKit.UIView {
  public enum SelectionStyle {
    case bar
    case boundingBox
    public static func == (a: NautilusUISDK.NautilusAppTopBar.SelectionStyle, b: NautilusUISDK.NautilusAppTopBar.SelectionStyle) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct Style {
    public let backgroundColor: UIKit.UIColor
    public let selectionShadowRadius: CoreGraphics.CGFloat
    public let selectionStyle: NautilusUISDK.NautilusAppTopBar.SelectionStyle
    public let selectionBarColor: UIKit.UIColor
    public let selectionBarHeight: CoreGraphics.CGFloat
    public let selectionBoundingBoxColor: UIKit.UIColor
    public let selectionBoundingBoxInsets: UIKit.UIEdgeInsets
    public let selectionBoundingBoxCornerRadius: CoreGraphics.CGFloat
    public static var `default`: NautilusUISDK.NautilusAppTopBar.Style {
      get
    }
    public init(backgroundColor: UIKit.UIColor, selectionShadowRadius: CoreGraphics.CGFloat, selectionStyle: NautilusUISDK.NautilusAppTopBar.SelectionStyle, selectionBarColor: UIKit.UIColor, selectionBarHeight: CoreGraphics.CGFloat, selectionBoundingBoxColor: UIKit.UIColor, selectionBoundingBoxInsets: UIKit.UIEdgeInsets, selectionBoundingBoxCornerRadius: CoreGraphics.CGFloat)
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak final public var delegate: NautilusUISDK.NautilusAppTopBarDelegate?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak final public var dataSource: NautilusUISDK.NautilusAppTopBarDataSource?
  @_Concurrency.MainActor(unsafe) final public var selectedIndex: Swift.Int {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var style: NautilusUISDK.NautilusAppTopBar.Style {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc override final public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) final public func reloadData()
  @_Concurrency.MainActor(unsafe) final public func selectItem(at index: Swift.Int)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class NautilusLoadingView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public static func showLoadingIndicator(title: Swift.String, to viewController: UIKit.UIViewController)
  @_Concurrency.MainActor(unsafe) public static func hideLoadingIndicator(from viewController: UIKit.UIViewController)
  @objc deinit
}
public protocol HTMLViewDelegate : AnyObject {
  func htmlViewTapLink(_ htmlView: NautilusUISDK.HTMLView, url: Foundation.URL)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class HTMLView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak final public var delegate: NautilusUISDK.HTMLViewDelegate?
  @_Concurrency.MainActor(unsafe) final public var htmlString: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var font: UIKit.UIFont {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var textColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override final public func updateConstraints()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class NautilusAppContentsCollectionView : UIKit.UICollectionView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect, collectionViewLayout layout: UIKit.UICollectionViewLayout)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension NautilusUISDK.NautilusAppContentsCollectionView : UIKit.UICollectionViewDelegateFlowLayout {
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class ContainedButton : UIKit.UIControl {
  @objc public enum NautilusBorderRadiusStyle : Swift.Int {
    case none
    case small
    case midium
    case large
    case pill
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var isHighlighted: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var isEnabled: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) final public var textColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) final public var textColorDisabled: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) final public var titleFontSize: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) final public var titleFontSizeDisabled: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) final public var fillColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) final public var fillColorDisabled: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) final public var outlineColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) final public var outlineColorDisabled: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) final public var title: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) final public var image: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) final public var stackViewInsets: UIKit.UIEdgeInsets {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) final public var borderRadiusStyle: NautilusUISDK.ContainedButton.NautilusBorderRadiusStyle {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc override final public func awakeFromNib()
  @objc override final public func prepareForInterfaceBuilder()
  @_Concurrency.MainActor(unsafe) @objc override final public func hitTest(_ point: CoreGraphics.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @objc deinit
}
@objc public protocol NautilusGridViewLayout {
  @objc var numberOfColumns: Swift.Int { get set }
  @objc var gridView: NautilusUISDK.NautilusGridView? { get set }
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor(unsafe) open class NautilusGridViewCollectionFlowLayout : UIKit.UICollectionViewFlowLayout, NautilusUISDK.NautilusGridViewLayout {
  @_Concurrency.MainActor(unsafe) @objc public var numberOfColumns: Swift.Int {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc weak public var gridView: NautilusUISDK.NautilusGridView?
  @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepare()
  @objc deinit
}
public protocol NautilusContentsCreatable {
  func createCollectionView(insetTop: CoreGraphics.CGFloat, column: NautilusUISDK.ContentsColumn, detailView: NautilusUISDK.TransitionStyle, headerSize: CoreGraphics.CGSize, completion: @escaping (NautilusUISDK.NautilusAppContentsCollectionView) -> Swift.Void)
  func createZeroContentsView(insetTop: CoreGraphics.CGFloat, image: UIKit.UIImage?, text: Swift.String?) -> UIKit.UIView
  func createErrorContentsView(insetTop: CoreGraphics.CGFloat, image: UIKit.UIImage?, text: Swift.String?, buttonTitle: Swift.String?, action: ObjectiveC.Selector) -> UIKit.UIView
}
extension NautilusUISDK.NautilusContentsCreatable where Self : UIKit.UIViewController {
  public func createCollectionView(insetTop: CoreGraphics.CGFloat, column: NautilusUISDK.ContentsColumn, detailView: NautilusUISDK.TransitionStyle, headerSize: CoreGraphics.CGSize, completion: @escaping (NautilusUISDK.NautilusAppContentsCollectionView) -> Swift.Void)
  public func createZeroContentsView(insetTop: CoreGraphics.CGFloat, image: UIKit.UIImage?, text: Swift.String?) -> UIKit.UIView
  public func createErrorContentsView(insetTop: CoreGraphics.CGFloat, image: UIKit.UIImage?, text: Swift.String?, buttonTitle: Swift.String?, action: ObjectiveC.Selector) -> UIKit.UIView
}
public protocol NautilusBottomSheetContainerViewControllerDelegate : AnyObject {
  func bottomSheetViewController(_ bottomSheetViewController: NautilusUISDK.NautilusBottomSheetContainerViewController, didChangeTo screenOverlayType: NautilusUISDK.NautilusBottomSheetContainerViewController.BottomSheetScreenOverlayType)
  func bottomSheetViewController(_ bottomSheetViewController: NautilusUISDK.NautilusBottomSheetContainerViewController)
  func bottomSheetViewController(_ bottomSheetViewController: NautilusUISDK.NautilusBottomSheetContainerViewController, update sheetContainerViewFrame: CoreGraphics.CGRect, didChangeBottomSheetFrameWithReason reason: NautilusUISDK.NautilusBottomSheetFrameChangeReason)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class NautilusBottomSheetContainerViewController : UIKit.UIViewController, UIKit.UIGestureRecognizerDelegate {
  public enum BottomSheetScreenOverlayType {
    case full
    case half
    case minimum
    public static func == (a: NautilusUISDK.NautilusBottomSheetContainerViewController.BottomSheetScreenOverlayType, b: NautilusUISDK.NautilusBottomSheetContainerViewController.BottomSheetScreenOverlayType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) open var bottomSheetContentViewController: NautilusUISDK.NautilusBottomSheetContentViewController {
    get
  }
  @_Concurrency.MainActor(unsafe) open var initialBottomSheetOverlayType: NautilusUISDK.NautilusBottomSheetContainerViewController.BottomSheetScreenOverlayType {
    get
  }
  @_Concurrency.MainActor(unsafe) open var sheetMoveHandleSize: CoreGraphics.CGSize {
    get
  }
  @_Concurrency.MainActor(unsafe) open var sheetMoveHandleEdgeInsets: UIKit.UIEdgeInsets {
    get
  }
  @_Concurrency.MainActor(unsafe) weak public var bottomSheetDelegate: NautilusUISDK.NautilusBottomSheetContainerViewControllerDelegate?
  @_Concurrency.MainActor(unsafe) public var panGestureRecognizer: UIKit.UIPanGestureRecognizer! {
    get
  }
  @_Concurrency.MainActor(unsafe) public var currentBottomSheetScreenOverlayType: NautilusUISDK.NautilusBottomSheetContainerViewController.BottomSheetScreenOverlayType {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @available(iOS 11.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewSafeAreaInsetsDidChange()
  @_Concurrency.MainActor(unsafe) public func updateBottomSheetScreenOverlayType(_ screenType: NautilusUISDK.NautilusBottomSheetContainerViewController.BottomSheetScreenOverlayType)
  @_Concurrency.MainActor(unsafe) public func estimateBottomSheetSize(for screenOverlayType: NautilusUISDK.NautilusBottomSheetContainerViewController.BottomSheetScreenOverlayType) -> CoreGraphics.CGSize
  @_Concurrency.MainActor(unsafe) @objc public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum NautilusBottomSheetFrameChangeReason {
  case swipeByUser
  case updateByAction
  public static func == (a: NautilusUISDK.NautilusBottomSheetFrameChangeReason, b: NautilusUISDK.NautilusBottomSheetFrameChangeReason) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class GhostButton : UIKit.UIControl {
  @_Concurrency.MainActor(unsafe) @objc override final public var isHighlighted: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var isEnabled: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) final public var textColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) final public var textColorDisabled: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) final public var titleFontSize: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) final public var titleFontSizeDisabled: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) final public var title: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) final public var buttonTitleInsets: UIKit.UIEdgeInsets {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc override final public func awakeFromNib()
  @objc override final public func prepareForInterfaceBuilder()
  @_Concurrency.MainActor(unsafe) @objc override final public func hitTest(_ point: CoreGraphics.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
  @objc deinit
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor(unsafe) open class NautilusGridViewCell : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) open var isSelected: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var isHighlighted: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class ContentsLayout : UIKit.UICollectionViewLayout, NautilusUISDK.SetContentsLayout {
  @_Concurrency.MainActor(unsafe) public func setLayoutData(headerSize: CoreGraphics.CGSize, itemHeights: [[CoreGraphics.CGFloat]], column: NautilusUISDK.ContentsColumn)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var collectionViewContentSize: CoreGraphics.CGSize {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func prepare()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutAttributesForItem(at indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewLayoutAttributes?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutAttributesForElements(in rect: CoreGraphics.CGRect) -> [UIKit.UICollectionViewLayoutAttributes]?
  @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol SetContentsLayout : AnyObject {
  func setLayoutData(headerSize: CoreGraphics.CGSize, itemHeights: [[CoreGraphics.CGFloat]], column: NautilusUISDK.ContentsColumn)
}
public enum CellLayoutSize {
  case large
  case midium
  case small
  public static func == (a: NautilusUISDK.CellLayoutSize, b: NautilusUISDK.CellLayoutSize) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class NautilusRadioGroup : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) weak public var dataSource: NautilusUISDK.NautilusRadioGroupDataSource?
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: NautilusUISDK.NautilusRadioGroupDelegate?
  @objc @_Concurrency.MainActor(unsafe) public var radioGroupTitle: Swift.String? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var indexForSelectedItem: Swift.Int {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc @_Concurrency.MainActor(unsafe) public func loadItems()
  @objc @_Concurrency.MainActor(unsafe) public func selectItem(at index: Swift.Int)
  @objc deinit
}
@objc public protocol NautilusRadioGroupDataSource {
  @objc func numberOfRadioItems(_ radioGroup: NautilusUISDK.NautilusRadioGroup) -> Swift.Int
  @objc func radioItemTitle(_ radioGroup: NautilusUISDK.NautilusRadioGroup, at index: Swift.Int) -> Swift.String
}
@objc public protocol NautilusRadioGroupDelegate {
  @objc func radioGroup(_ radioGroup: NautilusUISDK.NautilusRadioGroup, didSelect index: Swift.Int)
}
public protocol NautilusListViewCreatable {
  func createCategoryView() -> NautilusUISDK.NautilusAppTabView
  func createPageView(isCategory: Swift.Bool) -> NautilusUISDK.NautilusAppPageViewController
}
extension NautilusUISDK.NautilusListViewCreatable where Self : UIKit.UIViewController {
  public func createCategoryView() -> NautilusUISDK.NautilusAppTabView
  public func createPageView(isCategory: Swift.Bool) -> NautilusUISDK.NautilusAppPageViewController
}
@objc public protocol NautilusAppTopBarControllerDelegate {
  @objc func numberOfViewControllers(_ appTopBarController: NautilusUISDK.NautilusAppTopBarController) -> Swift.Int
  @objc func appTopBarController(_ appTopBarController: NautilusUISDK.NautilusAppTopBarController, viewControllerAt index: Swift.Int) -> UIKit.UIViewController
  @objc func appTopBarController(_ appTopBarController: NautilusUISDK.NautilusAppTopBarController, indexOfViewController viewController: UIKit.UIViewController) -> Swift.Int
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class NautilusAppTopBarController : UIKit.UIViewController, NautilusUISDK.NautilusAppTopBarDelegate, NautilusUISDK.NautilusAppTopBarDataSource, UIKit.UIPageViewControllerDelegate, UIKit.UIPageViewControllerDataSource {
  @_Concurrency.MainActor(unsafe) public var appTopBar: NautilusUISDK.NautilusAppTopBar! {
    get
  }
  @_Concurrency.MainActor(unsafe) public var contentView: UIKit.UIView! {
    get
  }
  @_Concurrency.MainActor(unsafe) public var pageViewController: UIKit.UIPageViewController! {
    get
  }
  @_Concurrency.MainActor(unsafe) weak public var delegate: NautilusUISDK.NautilusAppTopBarControllerDelegate?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillLayoutSubviews()
  @_Concurrency.MainActor(unsafe) public func selectViewController(at index: Swift.Int)
  @_Concurrency.MainActor(unsafe) @objc open func appTopBar(_ appTopBar: NautilusUISDK.NautilusAppTopBar, didSelectedAt index: Swift.Int)
  @_Concurrency.MainActor(unsafe) @objc open func appTopBar(_ appTopBar: NautilusUISDK.NautilusAppTopBar, viewForItemAt index: Swift.Int) -> NautilusUISDK.NautilusAppTopBarItemView
  @_Concurrency.MainActor(unsafe) @objc open func numberOfItems(in appTopBar: NautilusUISDK.NautilusAppTopBar) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func pageViewController(_ pageViewController: UIKit.UIPageViewController, viewControllerBefore viewController: UIKit.UIViewController) -> UIKit.UIViewController?
  @_Concurrency.MainActor(unsafe) @objc public func pageViewController(_ pageViewController: UIKit.UIPageViewController, viewControllerAfter viewController: UIKit.UIViewController) -> UIKit.UIViewController?
  @_Concurrency.MainActor(unsafe) @objc public func presentationCount(for pageViewController: UIKit.UIPageViewController) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func pageViewController(_ pageViewController: UIKit.UIPageViewController, didFinishAnimating finished: Swift.Bool, previousViewControllers: [UIKit.UIViewController], transitionCompleted completed: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class NautilusAppTopBarItemTitledLabelView : NautilusUISDK.NautilusAppTopBarItemView {
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override final public var isHighlighted: Swift.Bool {
    @_Concurrency.MainActor(unsafe) get
    @_Concurrency.MainActor(unsafe) set
  }
  @_Concurrency.MainActor(unsafe) override final public var isSelected: Swift.Bool {
    @_Concurrency.MainActor(unsafe) get
    @_Concurrency.MainActor(unsafe) set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc override final public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) override final public func updateStyle()
  @objc deinit
}
public protocol NautilusAppTabViewDataSource {
  var hierarchicalCategories: [[NautilusUISDK.NautilusCategory]]? { get }
}
@objc public enum NoneCategory : Swift.Int {
  case removeMargin
  case addAllTab
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class CellWidth : ObjectiveC.NSObject {
  public var width: NautilusUISDK.CategoryCellWidth
  public init(width: CoreGraphics.CGFloat?)
  @objc deinit
}
@objc public class NautilusCategory : ObjectiveC.NSObject {
  final public let hierarchy: Swift.Int
  final public let parentCategoryID: Swift.Int?
  final public let categoryID: Swift.Int?
  final public let categoryName: Swift.String
  final public let sortNo: Swift.Int
  final public let alias: Swift.String
  public init(hierarchy: Swift.Int, parentCategoryID: Swift.Int?, categoryID: Swift.Int?, categoryName: Swift.String, sortNo: Swift.Int, alias: Swift.String)
  @objc deinit
}
extension NautilusUISDK.NautilusCategory {
  public static let allTab: NautilusUISDK.NautilusCategory
}
public enum CategoryCellWidth {
  case auto
  case fixed(width: CoreGraphics.CGFloat)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class NautilusMessageDialogViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override final public var title: Swift.String? {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) final public var message: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var closeButtonImage: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var modalTransitionStyle: UIKit.UIModalTransitionStyle {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var modalPresentationStyle: UIKit.UIModalPresentationStyle {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) convenience public init(title: Swift.String?, message: Swift.String?, closeButtonImage: UIKit.UIImage?)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class NautilusCommonErrorView : UIKit.UIView {
  public struct ErrorInfo {
    public let title: Swift.String
    public let message: Swift.String
    public let actionText: Swift.String
    public let action: () -> Swift.Void
    public init(title: Swift.String, message: Swift.String = "", actionText: Swift.String = "", action: @escaping () -> Swift.Void)
  }
  @_Concurrency.MainActor(unsafe) public static func instantiate(errorInfo: NautilusUISDK.NautilusCommonErrorView.ErrorInfo) -> NautilusUISDK.NautilusCommonErrorView
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ContentsFlowLayout : UIKit.UICollectionViewFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func shouldInvalidateLayout(forBoundsChange newBounds: CoreGraphics.CGRect) -> Swift.Bool
  @objc deinit
}
@objc public enum ContentsColumn : Swift.Int {
  case one = 1
  case two = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum TransitionStyle : Swift.Int {
  case dialog
  case fullscreen
  case notHaveDetail
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol NautilusStackListViewDataSource : AnyObject {
  func numberOfItems(_ stackListView: NautilusUISDK.NautilusStackListView) -> Swift.Int
  func stackListView(_ stackListView: NautilusUISDK.NautilusStackListView, viewForItemAt index: Swift.Int) -> UIKit.UIView
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class NautilusStackListView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak public var dataSource: NautilusUISDK.NautilusStackListViewDataSource?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) public func clearData()
  @_Concurrency.MainActor(unsafe) public func reloadData()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class NautilusBottomSheetContentViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) open var trackableScrollView: UIKit.UIScrollView? {
    get
  }
  @_Concurrency.MainActor(unsafe) open var minimumSheetContentHeight: CoreGraphics.CGFloat {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public protocol NautilusGridViewDataSource {
  @objc func numberOfSections(in gridView: NautilusUISDK.NautilusGridView) -> Swift.Int
  @objc func gridView(_ gridView: NautilusUISDK.NautilusGridView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc func gridView(_ gridView: NautilusUISDK.NautilusGridView, cellForItemAt indexPath: Foundation.IndexPath) -> NautilusUISDK.NautilusGridViewCell
  @objc func gridView(_ gridView: NautilusUISDK.NautilusGridView, cellHeightThatFitsTo size: CoreGraphics.CGSize, forItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGFloat
}
@objc public protocol NautilusGridViewDelegate {
  @objc func gridView(_ gridView: NautilusUISDK.NautilusGridView, didSelectItemAt indexPath: Foundation.IndexPath)
  @objc func gridView(_ gridView: NautilusUISDK.NautilusGridView, didDeselectItemAt indexPath: Foundation.IndexPath)
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor(unsafe) final public class NautilusGridView : UIKit.UIView, UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDataSource {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak final public var dataSource: NautilusUISDK.NautilusGridViewDataSource?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak final public var delegate: NautilusUISDK.NautilusGridViewDelegate?
  @_Concurrency.MainActor(unsafe) final public var gridLayout: NautilusUISDK.NautilusGridViewLayout {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var refreshControl: UIKit.UIRefreshControl? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) public init(frame: CoreGraphics.CGRect, gridLayout: NautilusUISDK.NautilusGridViewLayout)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) final public func reloadData()
  @_Concurrency.MainActor(unsafe) final public func reloadItem(at indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) final public func reloadItems(at indexPaths: [Foundation.IndexPath])
  @_Concurrency.MainActor(unsafe) @objc final public func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, didDeselectItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class NautilusAppTopBarItemView : UIKit.UIView {
  public struct Style {
    public let backgroundColor: UIKit.UIColor
    public let selectedBackgroundColor: UIKit.UIColor
    public let textColor: UIKit.UIColor
    public let selectedTextColor: UIKit.UIColor
    public let selectedFont: UIKit.UIFont
    public let unselectedFont: UIKit.UIFont
    public let textInsets: UIKit.UIEdgeInsets
    public static var `default`: NautilusUISDK.NautilusAppTopBarItemView.Style {
      get
    }
    public init(backgroundColor: UIKit.UIColor, selectedBackgroundColor: UIKit.UIColor, textColor: UIKit.UIColor, selectedTextColor: UIKit.UIColor, selectedFont: UIKit.UIFont, unselectedFont: UIKit.UIFont, textInsets: UIKit.UIEdgeInsets)
  }
  @_Concurrency.MainActor(unsafe) open var isHighlighted: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var isSelected: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var style: NautilusUISDK.NautilusAppTopBarItemView.Style {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) open func updateStyle()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class NautilusDatePickerGroup : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: NautilusUISDK.NautilusDatePickerGroupDelegate?
  @objc @_Concurrency.MainActor(unsafe) public var datePickerTitle: Swift.String? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var placeholder: Swift.String? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var locale: Foundation.Locale? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var calendar: Foundation.Calendar {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var timeZone: Foundation.TimeZone? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var datePickerMode: UIKit.UIDatePicker.Mode {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var date: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var minimumDate: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var maximumDate: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var dateFormat: Swift.String {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) override dynamic public init(frame: CoreGraphics.CGRect)
  @objc deinit
}
@objc public protocol NautilusDatePickerGroupDelegate {
  @objc func datePickerGroup(_: NautilusUISDK.NautilusDatePickerGroup, dateChanged date: Foundation.Date)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class NautilusCheckBoxGroup : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) weak public var dataSource: NautilusUISDK.NautilusCheckBoxGroupDataSource?
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: NautilusUISDK.NautilusCheckBoxGroupDelegate?
  @objc @_Concurrency.MainActor(unsafe) public var checkBoxGroupTitle: Swift.String? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var indicesForSelectedItem: [Swift.Int] {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc @_Concurrency.MainActor(unsafe) public func loadItems()
  @objc @_Concurrency.MainActor(unsafe) public func selectItem(at index: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) public func deselectItem(at index: Swift.Int)
  @objc deinit
}
@objc public protocol NautilusCheckBoxGroupDataSource {
  @objc func numberOfCheckItems(_ checkBoxGroup: NautilusUISDK.NautilusCheckBoxGroup) -> Swift.Int
  @objc func checkBoxItemTitle(_ checkBoxGroup: NautilusUISDK.NautilusCheckBoxGroup, at index: Swift.Int) -> Swift.String
}
@objc public protocol NautilusCheckBoxGroupDelegate {
  @objc func checkBoxGroup(_ checkBoxGroup: NautilusUISDK.NautilusCheckBoxGroup, didSelect index: Swift.Int)
  @objc func checkBoxGroup(_ checkBoxGroup: NautilusUISDK.NautilusCheckBoxGroup, didDeselect index: Swift.Int)
}
extension NautilusUISDK.NautilusAppTopBar.SelectionStyle : Swift.Equatable {}
extension NautilusUISDK.NautilusAppTopBar.SelectionStyle : Swift.Hashable {}
extension NautilusUISDK.ContainedButton.NautilusBorderRadiusStyle : Swift.Equatable {}
extension NautilusUISDK.ContainedButton.NautilusBorderRadiusStyle : Swift.Hashable {}
extension NautilusUISDK.ContainedButton.NautilusBorderRadiusStyle : Swift.RawRepresentable {}
extension NautilusUISDK.NautilusBottomSheetContainerViewController.BottomSheetScreenOverlayType : Swift.Equatable {}
extension NautilusUISDK.NautilusBottomSheetContainerViewController.BottomSheetScreenOverlayType : Swift.Hashable {}
extension NautilusUISDK.NautilusBottomSheetFrameChangeReason : Swift.Equatable {}
extension NautilusUISDK.NautilusBottomSheetFrameChangeReason : Swift.Hashable {}
extension NautilusUISDK.CellLayoutSize : Swift.Equatable {}
extension NautilusUISDK.CellLayoutSize : Swift.Hashable {}
extension NautilusUISDK.NoneCategory : Swift.Equatable {}
extension NautilusUISDK.NoneCategory : Swift.Hashable {}
extension NautilusUISDK.NoneCategory : Swift.RawRepresentable {}
extension NautilusUISDK.ContentsColumn : Swift.Equatable {}
extension NautilusUISDK.ContentsColumn : Swift.Hashable {}
extension NautilusUISDK.ContentsColumn : Swift.RawRepresentable {}
extension NautilusUISDK.TransitionStyle : Swift.Equatable {}
extension NautilusUISDK.TransitionStyle : Swift.Hashable {}
extension NautilusUISDK.TransitionStyle : Swift.RawRepresentable {}
