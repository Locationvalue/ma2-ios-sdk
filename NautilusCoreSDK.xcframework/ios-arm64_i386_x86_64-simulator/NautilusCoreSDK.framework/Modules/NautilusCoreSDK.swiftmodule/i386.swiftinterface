// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target i386-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name NautilusCoreSDK
import CoreTelephony
import Foundation
import NautilusContainerSDK
import NautilusLoggingSDK
import Swift
import SystemConfiguration
import UIKit
public protocol NetworkServiceLogger {
  var id: Swift.String { get }
  func printRequest(_ request: Foundation.URLRequest)
  func printResponse(_ data: Foundation.Data?, _ response: Foundation.URLResponse)
  func printError(_ error: Swift.Error)
}
@_hasMissingDesignatedInitializers final public class NautilusRequestPolicy : NautilusCoreSDK.RequestPolicy {
  public enum Preset {
    public static let `default`: NautilusCoreSDK.NautilusRequestPolicy
    public static let short: NautilusCoreSDK.NautilusRequestPolicy
    public static let long: NautilusCoreSDK.NautilusRequestPolicy
  }
  final public let cachePolicy: Foundation.URLRequest.CachePolicy
  final public let timeoutInterval: Foundation.TimeInterval
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class NautilusAppConfig : ObjectiveC.NSObject {
  @objc final public let environment: NautilusCoreSDK.NautilusDeploymentEnvironment
  @objc deinit
}
extension Notification {
  public enum NautilusApp {
    public static let featureInitializationSuccess: Foundation.Notification.Name
    public static let featureInitializationFailure: Foundation.Notification.Name
    public enum UserInfoKey {
      public static let feature: Swift.String
    }
  }
}
@objc public protocol NautilusFeature : NautilusContainerSDK.NautilusComponent {
  @objc static func initialize(application: NautilusCoreSDK.NautilusApp)
  @objc static var configFilename: Swift.String? { get }
  @objc var app: NautilusCoreSDK.NautilusApp { get }
}
public protocol APIClient {
  var service: NautilusCoreSDK.NetworkService { get }
  static func instantiate() -> Self
  static func instantiate(service: NautilusCoreSDK.NetworkService) -> Self
  static func instantiate(service: NautilusCoreSDK.NetworkService, callbackQueue: Foundation.OperationQueue) -> Self
  init(service: NautilusCoreSDK.NetworkService)
  init(service: NautilusCoreSDK.NetworkService, callbackQueue: Foundation.OperationQueue?)
  func send<R>(request: R, completion: @escaping (Swift.Result<R.Object, NautilusCoreSDK.NetworkServiceError>) -> Swift.Void) where R : NautilusCoreSDK.Request
  func cancel()
}
public enum NautilusDeviceInfo {
  public static var systemType: NautilusCoreSDK.NautilusDeviceSystemType {
    get
  }
  public static var osName: Swift.String {
    get
  }
  public static var osVersion: Swift.String {
    get
  }
  public static var deviceName: Swift.String {
    get
  }
  public static var carrier: Swift.String {
    get
  }
  public static var country: Swift.String {
    get
  }
  public static var language: Swift.String {
    get
  }
  public static var localeDescription: Swift.String {
    get
  }
}
public enum NautilusDeviceSystemType {
  case iOS
  case watchOS
  case tvOS
  case macOS
  public var typeValue: Swift.Int {
    get
  }
  public static func == (a: NautilusCoreSDK.NautilusDeviceSystemType, b: NautilusCoreSDK.NautilusDeviceSystemType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol Response {
}
public protocol RawBodyResponse : NautilusCoreSDK.Response {
  var rawBodyResponse: Foundation.Data { get set }
}
public protocol ResponseDecoder {
  static var `default`: NautilusCoreSDK.ResponseDecoder { get }
  func decode<T>(_ type: T.Type, from data: Foundation.Data) throws -> T where T : Swift.Decodable
}
extension JSONDecoder : NautilusCoreSDK.ResponseDecoder {
  public static var `default`: NautilusCoreSDK.ResponseDecoder {
    get
  }
}
extension PropertyListDecoder : NautilusCoreSDK.ResponseDecoder {
  public static var `default`: NautilusCoreSDK.ResponseDecoder {
    get
  }
}
extension URLSession {
  public enum NautilusApp {
    public static var `default`: Foundation.URLSession {
      get
    }
  }
}
public protocol NautilusRequestParameter : NautilusCoreSDK.RequestParameter {
  var queryParameters: [Swift.String : Any]? { get }
  var data: Foundation.Data? { get }
}
@objc public enum NautilusInitializationFailureReason : Swift.Int, Swift.Error {
  case cancelled = -10
  case unknown = -1
  case noConnection
  case invalidSettings
  case failToIssuePID
  case failOnServer
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum NautilusPushDeviceRegistraionFailureReason : Swift.Int, Swift.Error {
  case none = 0
  case alreadyRegistered
  case invalidCID
  case networkError
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@propertyWrapper public struct NautilusKeyChain<T> where T : NautilusCoreSDK.KeyChainConvertible {
  public init(key: Swift.String, defaultValue: T)
  public var wrappedValue: T {
    get
    set
  }
}
public protocol KeyChainConvertible {
  init?(with value: Any)
  func convertDataArray() -> [Foundation.Data]?
}
extension String : NautilusCoreSDK.KeyChainConvertible {
  public func convertDataArray() -> [Foundation.Data]?
}
extension Array : NautilusCoreSDK.KeyChainConvertible {
  public init?(with value: Any)
  public func convertDataArray() -> [Foundation.Data]?
}
@objc @_inheritsConvenienceInitializers final public class NetworkListener : ObjectiveC.NSObject {
  final public func listenerStart() -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
extension NSNotification.Name {
  public static let flagsNotification: Foundation.Notification.Name
}
public struct NetworkListenerUtil {
  public static let notificationCenter: Foundation.NotificationCenter
  public static func isOnline() -> Swift.Bool
}
@_inheritsConvenienceInitializers @objc final public class NautilusAppConfigBuilder : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc final public func build() -> NautilusCoreSDK.NautilusAppConfig
  @objc final public func setEnvironment(_ environment: NautilusCoreSDK.NautilusDeploymentEnvironment)
  @objc deinit
}
extension Date {
  public static func iso8601Date(from string: Swift.String) -> Foundation.Date?
  public static func iso8601String(from date: Foundation.Date) -> Swift.String
  public static func slashDateTime(from date: Foundation.Date) -> Swift.String
  public static func japaneseDateTime(from date: Foundation.Date) -> Swift.String
  public static func slashDateOnly(from date: Foundation.Date) -> Swift.String
  public static func convertTemplateDateTime(from date: Foundation.Date, template: Swift.String) -> Swift.String
  public static func formatDate(string: Swift.String, format: Swift.String) -> Foundation.Date
}
@objc public class NautilusLocation : ObjectiveC.NSObject {
  final public let latitude: Swift.Double
  final public let longitude: Swift.Double
  public var latitudeString: Swift.String {
    get
  }
  public var longitudeString: Swift.String {
    get
  }
  public init(latitude: Swift.Double, longitude: Swift.Double)
  @objc override dynamic public init()
  @objc deinit
}
public typealias NautilusUserLocationUpdateCompletionHandler = ((NautilusCoreSDK.NautilusLocation?) -> Swift.Void)
public typealias NautilusLocationPermissionCompletionHandler = ((Swift.Bool) -> Swift.Void)
@objc public protocol NautilusLocationProvider {
  @objc var canTrackUserLocation: Swift.Bool { get }
  @objc var latestUserLocation: NautilusCoreSDK.NautilusLocation? { get }
  @objc func requestUpdateUserLocation(completion: @escaping NautilusCoreSDK.NautilusUserLocationUpdateCompletionHandler)
  @objc func requestLocationPermission(completion: @escaping NautilusCoreSDK.NautilusLocationPermissionCompletionHandler)
}
@_hasMissingDesignatedInitializers final public class LifeCycleNotificationCenter {
  public static let shared: NautilusCoreSDK.LifeCycleNotificationCenter
  final public func setup()
  @objc deinit
}
public enum NautilusAppInfo {
  public static var appBundleIdentifier: Swift.String {
    get
  }
  public static var appName: Swift.String {
    get
  }
  public static var appVersion: Swift.String {
    get
  }
  public static var localeDescription: Swift.String {
    get
  }
  public static var shopAccountID: Swift.Int {
    get
  }
  public static var userAgent: Swift.String {
    get
  }
}
public enum NautilusKeychain {
  public static func loadString(for key: Swift.String) -> Swift.String?
  public static func loadString(for key: Swift.String, defaultValue: Swift.String) -> Swift.String
  @discardableResult
  public static func storeString(value: Swift.String, for key: Swift.String) -> Swift.Bool
  @discardableResult
  public static func deleteString(for key: Swift.String) -> Swift.Bool
}
public enum NetworkServiceError : Swift.Error {
  case unknown
  case connection(errorCode: Swift.Int, message: Swift.String)
  case apiProcessError(httpStatusCode: Swift.Int, error: NautilusCoreSDK.ErrorResponse)
  case httpConnection(statusCode: Swift.Int, url: Foundation.URL?)
  case parseFailure
  case userCancelled
}
public protocol NetworkService {
  var loggers: [NautilusCoreSDK.NetworkServiceLogger] { get }
  init(session: Foundation.URLSession)
  func addLogger(_ logger: NautilusCoreSDK.NetworkServiceLogger)
  func removeLogger(_ logger: NautilusCoreSDK.NetworkServiceLogger)
  func send<R>(request: R, completion: @escaping (Swift.Result<R.Object, NautilusCoreSDK.NetworkServiceError>) -> Swift.Void) where R : NautilusCoreSDK.Request
  func send<R>(request: R, callbackQueue: Foundation.OperationQueue?, completion: @escaping (Swift.Result<R.Object, NautilusCoreSDK.NetworkServiceError>) -> Swift.Void) where R : NautilusCoreSDK.Request
  func cancelAll()
  func cancel(uuid: Foundation.UUID)
}
final public class NautilusNetworkService : NautilusCoreSDK.NetworkService {
  public static let `default`: NautilusCoreSDK.NetworkService
  final public var loggers: [NautilusCoreSDK.NetworkServiceLogger] {
    get
  }
  public init(session: Foundation.URLSession)
  final public func addLogger(_ logger: NautilusCoreSDK.NetworkServiceLogger)
  final public func removeLogger(_ logger: NautilusCoreSDK.NetworkServiceLogger)
  final public func send<R>(request: R, completion: @escaping (Swift.Result<R.Object, NautilusCoreSDK.NetworkServiceError>) -> Swift.Void) where R : NautilusCoreSDK.Request
  final public func send<R>(request: R, callbackQueue: Foundation.OperationQueue?, completion: @escaping (Swift.Result<R.Object, NautilusCoreSDK.NetworkServiceError>) -> Swift.Void) where R : NautilusCoreSDK.Request
  final public func cancelAll()
  final public func cancel(uuid: Foundation.UUID)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class NautilusApp : ObjectiveC.NSObject {
  final public var deployEnvironment: NautilusCoreSDK.NautilusDeploymentEnvironment {
    get
  }
  weak final public var delegate: NautilusCoreSDK.NautilusAppDelegate?
  final public let name: Swift.String
  final public let notificationCenter: Foundation.NotificationCenter
  final public var locationProvider: NautilusCoreSDK.NautilusLocationProvider?
  final public var isInitialized: Swift.Bool {
    get
  }
  @objc public static func app() -> NautilusCoreSDK.NautilusApp
  @objc(appNamed:) public static func app(name: Swift.String) -> NautilusCoreSDK.NautilusApp
  @objc public static func initialzie(apiKey: Swift.String, config: NautilusCoreSDK.NautilusAppConfig)
  @objc public static func initialize(name: Swift.String, apiKey: Swift.String, config: NautilusCoreSDK.NautilusAppConfig)
  @objc public static func initialize(apiKey: Swift.String, config: NautilusCoreSDK.NautilusAppConfig, delegate: NautilusCoreSDK.NautilusAppDelegate?)
  @objc public static func initialize(name: Swift.String, apiKey: Swift.String, config: NautilusCoreSDK.NautilusAppConfig, delegate: NautilusCoreSDK.NautilusAppDelegate?)
  final public func register(feature: NautilusCoreSDK.NautilusFeature)
  final public func getFeature<T>(featureType: T.Type) -> T? where T : NautilusCoreSDK.NautilusFeature
  final public func getAvailableFeatures() -> [NautilusCoreSDK.NautilusFeature.Type]
  final public func getAllFeatures() -> [NautilusCoreSDK.NautilusFeature.Type]
  @objc deinit
}
extension NautilusApp {
  @objc public static var sdkVersionString: Swift.String {
    @objc get
  }
  @objc public static var sdkBuildVersionString: Swift.String {
    @objc get
  }
}
@propertyWrapper public struct NautilusUserDefaults<T> where T : NautilusCoreSDK.UserDefaultConvertible {
  public init(key: Swift.String, defaultValue: T)
  public var wrappedValue: T {
    get
    set
  }
}
public protocol UserDefaultConvertible {
  init?(with object: Any)
  func object() -> Any?
}
extension String : NautilusCoreSDK.UserDefaultConvertible {
  public init?(with object: Any)
  public func object() -> Any?
}
extension Array : NautilusCoreSDK.UserDefaultConvertible {
  public func object() -> Any?
}
extension Int : NautilusCoreSDK.UserDefaultConvertible {
  public init?(with object: Any)
  public func object() -> Any?
}
extension Int64 : NautilusCoreSDK.UserDefaultConvertible {
  public init?(with object: Any)
  public func object() -> Any?
}
extension Bool : NautilusCoreSDK.UserDefaultConvertible {
  public init?(with object: Any)
  public func object() -> Any?
}
@objc public enum NautilusDeploymentEnvironment : Swift.Int {
  case sandboxStaging
  case sandboxProduction
  case publicStaging
  case publicProduction
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public class ErrorResponse : NautilusCoreSDK.Response, Swift.Decodable {
  final public let date: Foundation.Date
  final public let errorMessage: Swift.String
  final public let errorCode: Swift.Int
  final public let pid: Swift.String?
  final public let deviceID: Swift.String?
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
public enum NautilusAppSettings {
  @available(iOS 12.0, *)
  public static var preferredUserInterfaceStyle: UIKit.UIUserInterfaceStyle {
    get
  }
  @NautilusCoreSDK.NautilusUserDefaults public static var bootDate: Swift.String {
    get
    set
    _modify
  }
  @NautilusCoreSDK.NautilusUserDefaults public static var appVersion: Swift.String {
    get
    set
    _modify
  }
  public static var apiKey: Swift.String!
  public static var logLevel: NautilusLoggingSDK.LogLevel {
    get
    set
  }
}
public enum RequestScheme {
  case http
  case https
  public static func == (a: NautilusCoreSDK.RequestScheme, b: NautilusCoreSDK.RequestScheme) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum RequestMethod {
  case post
  case get
  case put
  case delete
  public static func == (a: NautilusCoreSDK.RequestMethod, b: NautilusCoreSDK.RequestMethod) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol DataConvertible {
  var data: Foundation.Data? { get }
}
public protocol RequestParameter : NautilusCoreSDK.DataConvertible {
}
public protocol RequestPolicy {
  var cachePolicy: Foundation.URLRequest.CachePolicy { get }
  var timeoutInterval: Foundation.TimeInterval { get }
}
public protocol Request {
  associatedtype Parameter : NautilusCoreSDK.RequestParameter
  associatedtype Object : NautilusCoreSDK.Response, Swift.Decodable
  associatedtype ObjectDecoder : NautilusCoreSDK.ResponseDecoder
  var uuid: Foundation.UUID { get }
  var scheme: NautilusCoreSDK.RequestScheme { get }
  var hostname: Swift.String { get }
  var path: Swift.String { get }
  var method: NautilusCoreSDK.RequestMethod { get }
  var headerFields: [Swift.String : Swift.String]? { get }
  var queryParameters: [Swift.String : Any]? { get }
  var body: NautilusCoreSDK.DataConvertible? { get }
  var requestParameter: Self.Parameter? { get }
  var requestPolicy: NautilusCoreSDK.RequestPolicy { get }
  var url: Foundation.URL { get }
  func makeRequest() -> Foundation.URLRequest
}
extension Request {
  public var scheme: NautilusCoreSDK.RequestScheme {
    get
  }
  public var method: NautilusCoreSDK.RequestMethod {
    get
  }
  public var headerFields: [Swift.String : Swift.String]? {
    get
  }
  public var queryParameters: [Swift.String : Any]? {
    get
  }
  public var body: NautilusCoreSDK.DataConvertible? {
    get
  }
  public var url: Foundation.URL {
    get
  }
  public var queryItems: [Foundation.URLQueryItem]? {
    get
  }
  public func makeRequest() -> Foundation.URLRequest
}
open class NautilusAPICommonRequest<P, T, TD> where P : NautilusCoreSDK.RequestParameter, T : NautilusCoreSDK.Response, T : Swift.Decodable, TD : NautilusCoreSDK.ResponseDecoder {
  public typealias Parameter = P
  public typealias Object = T
  public typealias ObjectDecoder = TD
  final public let uuid: Foundation.UUID
  final public let app: NautilusCoreSDK.NautilusApp
  final public let requestParameter: NautilusCoreSDK.NautilusAPICommonRequest<P, T, TD>.Parameter?
  final public let requestPolicy: NautilusCoreSDK.RequestPolicy
  open var hostname: Swift.String {
    get
  }
  open var path: Swift.String {
    get
  }
  open var method: NautilusCoreSDK.RequestMethod {
    get
  }
  public init(app: NautilusCoreSDK.NautilusApp, requestParameter: NautilusCoreSDK.NautilusAPICommonRequest<P, T, TD>.Parameter?, requestPolicy: NautilusCoreSDK.RequestPolicy = NautilusRequestPolicy.Preset.default)
  @objc deinit
}
@objc public protocol NautilusAppDelegate {
  @objc func onSuccessNautilusAppInitialization(_ app: NautilusCoreSDK.NautilusApp)
  @objc func onFailureNautilusAppInitialization(_ app: NautilusCoreSDK.NautilusApp)
}
@objc @_inheritsConvenienceInitializers open class NautilusAPIClient : ObjectiveC.NSObject, NautilusCoreSDK.APIClient {
  @objc open class func instantiate() -> Self
  open class func instantiate(service: NautilusCoreSDK.NetworkService) -> Self
  open class func instantiate(service: NautilusCoreSDK.NetworkService, callbackQueue: Foundation.OperationQueue) -> Self
  open class func instantiate(app: NautilusCoreSDK.NautilusApp) -> Self
  open class func instantiate(app: NautilusCoreSDK.NautilusApp, service: NautilusCoreSDK.NetworkService) -> Self
  open class func instantiate(app: NautilusCoreSDK.NautilusApp, service: NautilusCoreSDK.NetworkService, callbackQueue: Foundation.OperationQueue) -> Self
  final public let service: NautilusCoreSDK.NetworkService
  final public let app: NautilusCoreSDK.NautilusApp
  required convenience public init(service: NautilusCoreSDK.NetworkService)
  required convenience public init(service: NautilusCoreSDK.NetworkService, callbackQueue: Foundation.OperationQueue?)
  required public init(app: NautilusCoreSDK.NautilusApp, service: NautilusCoreSDK.NetworkService, callbackQueue: Foundation.OperationQueue?)
  public func send<R>(request: R, completion: @escaping (Swift.Result<R.Object, NautilusCoreSDK.NetworkServiceError>) -> Swift.Void) where R : NautilusCoreSDK.Request
  @objc public func cancel()
  @objc deinit
}
extension NautilusCoreSDK.NautilusDeviceSystemType : Swift.Equatable {}
extension NautilusCoreSDK.NautilusDeviceSystemType : Swift.Hashable {}
extension NautilusCoreSDK.NautilusInitializationFailureReason : Swift.Equatable {}
extension NautilusCoreSDK.NautilusInitializationFailureReason : Swift.Hashable {}
extension NautilusCoreSDK.NautilusInitializationFailureReason : Swift.RawRepresentable {}
extension NautilusCoreSDK.NautilusPushDeviceRegistraionFailureReason : Swift.Equatable {}
extension NautilusCoreSDK.NautilusPushDeviceRegistraionFailureReason : Swift.Hashable {}
extension NautilusCoreSDK.NautilusPushDeviceRegistraionFailureReason : Swift.RawRepresentable {}
extension NautilusCoreSDK.NautilusDeploymentEnvironment : Swift.Equatable {}
extension NautilusCoreSDK.NautilusDeploymentEnvironment : Swift.Hashable {}
extension NautilusCoreSDK.NautilusDeploymentEnvironment : Swift.RawRepresentable {}
extension NautilusCoreSDK.RequestScheme : Swift.Equatable {}
extension NautilusCoreSDK.RequestScheme : Swift.Hashable {}
extension NautilusCoreSDK.RequestMethod : Swift.Equatable {}
extension NautilusCoreSDK.RequestMethod : Swift.Hashable {}
extension NautilusCoreSDK.NautilusAPICommonRequest : NautilusCoreSDK.Request {}
