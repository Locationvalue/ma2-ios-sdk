// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.2 effective-5.10 (swiftlang-6.2.0.19.9 clang-1700.3.19.1)
// swift-module-flags: -target arm64-apple-ios16.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-upcoming-feature ConciseMagicFile -enable-upcoming-feature ForwardTrailingClosures -enable-upcoming-feature StrictConcurrency -enable-upcoming-feature DeprecateApplicationMain -enable-upcoming-feature ImportObjcForwardDeclarations -enable-upcoming-feature DisableOutwardActorInference -enable-upcoming-feature IsolatedDefaultValues -enable-upcoming-feature GlobalConcurrency -enable-upcoming-feature InferSendableFromCaptures -enable-upcoming-feature RegionBasedIsolation -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name NautilusCollectionCardSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -formal-cxx-interoperability-mode=off -interface-compiler-version 6.2
import Foundation
import NautilusConfigSDK
import NautilusContainerSDK
import NautilusCoreSDK
import NautilusIdentifySDK
import NautilusLoggingSDK
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class NautilusCollectionMeta : ObjectiveC.NSObject {
  final public let updateDateTime: NautilusCollectionCardSDK.NautilusCollectionUpdateDateTime?
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class NautilusCollectionUpdateDateTime : ObjectiveC.NSObject {
  final public let area: Foundation.Date?
  final public let premium: Foundation.Date?
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class NautilusCollectionContents : ObjectiveC.NSObject {
  final public let areaList: [NautilusCollectionCardSDK.NautilusCollectionArea]?
  final public let premiumImageList: [NautilusCollectionCardSDK.NautilusCollectionPremiumImage]?
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class NautilusCollectionArea : ObjectiveC.NSObject {
  final public let areaName: Swift.String?
  final public let areaID: Swift.Int?
  final public let areaAlias: Swift.String?
  final public let imageList: [NautilusCollectionCardSDK.NautilusCollectionAreaImage]?
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class NautilusCollectionAreaImage : ObjectiveC.NSObject {
  final public let imageID: Swift.Int?
  final public let url: Foundation.URL?
  final public let title: Swift.String?
  final public let updateDateTime: Foundation.Date?
  final public let grantedDateTime: Foundation.Date?
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class NautilusCollectionPremiumImage : ObjectiveC.NSObject {
  final public let imageID: Swift.Int?
  final public let url: Foundation.URL?
  final public let title: Swift.String?
  final public let updateDateTime: Foundation.Date?
  final public let grantedDateTime: Foundation.Date?
  @objc deinit
}
@objc public class NautilusPublishCollectionCardInfo : ObjectiveC.NSObject {
  final public let checkinTargetType: NautilusCollectionCardSDK.NautilusCollectionCardCheckinTargetType
  final public let lat: Swift.Double?
  final public let lon: Swift.Double?
  final public let checkPointId: Swift.String?
  final public let checkinDeviceType: NautilusCollectionCardSDK.NautilusCollectionCardCheckinDeviceType?
  #if compiler(>=5.3) && $NonescapableTypes
  public init(checkinTargetType: NautilusCollectionCardSDK.NautilusCollectionCardCheckinTargetType, lat: Swift.Double?, lon: Swift.Double?, checkPointId: Swift.String?, checkinDeviceType: NautilusCollectionCardSDK.NautilusCollectionCardCheckinDeviceType?)
  #endif
  @objc deinit
}
@objc public enum NautilusCollectionCardCheckinTargetType : Swift.Int {
  case spot = 1
  case device = 2
  case place = 3
  #if compiler(>=5.3) && $NonescapableTypes
  public init?(rawValue: Swift.Int)
  #endif
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum NautilusCollectionCardCheckinDeviceType : Swift.Int {
  case qrCode = 1
  case beacon = 2
  #if compiler(>=5.3) && $NonescapableTypes
  public init?(rawValue: Swift.Int)
  #endif
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc final public class NautilusCollectionCard : ObjectiveC.NSObject, NautilusCoreSDK.NautilusFeature {
  #if compiler(>=5.3) && $NonescapableTypes
  @objc public static var configFilename: Swift.String? {
    @objc get
  }
  #endif
  @objc public static var componentType: NautilusContainerSDK.NautilusComponentType {
    @objc get
  }
  @objc public static var dependencies: [NautilusContainerSDK.NautilusComponentDependency] {
    @objc get
  }
  @objc final public let app: NautilusCoreSDK.NautilusApp
  @objc final public let name: Swift.String?
  @objc final public var featureStatus: NautilusCoreSDK.NautilusFeatureStatus {
    @objc get
  }
  @objc public static func initialize(application: NautilusCoreSDK.NautilusApp, completion: @escaping NautilusCoreSDK.NautilusFeatureInitializationCompletion)
  @objc public static func collectioncard() -> NautilusCollectionCardSDK.NautilusCollectionCard
  @objc(collectioncardAppNamed:) public static func collectioncard(appName: Swift.String) -> NautilusCollectionCardSDK.NautilusCollectionCard
  #if compiler(>=5.3) && $NonescapableTypes
  final public func publishCollectionCard(publishCollectionCardInfo: NautilusCollectionCardSDK.NautilusPublishCollectionCardInfo, completion: @escaping (Swift.Result<NautilusCollectionCardSDK.NautilusPublishedContents, NautilusCollectionCardSDK.NautilusCollectionCardError>) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  final public func publishCollectionCard(publishCollectionCardInfo: NautilusCollectionCardSDK.NautilusPublishCollectionCardInfo, completion: @escaping (NautilusCollectionCardSDK.NautilusPublishedContents?, Foundation.NSError?) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  final public func getCollectionCardList(completion: @escaping (Swift.Result<(NautilusCollectionCardSDK.NautilusCollectionMeta, NautilusCollectionCardSDK.NautilusCollectionContents), NautilusCollectionCardSDK.NautilusCollectionCardError>) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @objc final public func getCollectionCardList(completion: @escaping (NautilusCollectionCardSDK.NautilusCollectionMeta?, NautilusCollectionCardSDK.NautilusCollectionContents?, Foundation.NSError?) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  final public func setMemberSettingCollectionCard(selectedImageID: Swift.Int?, completion: @escaping (Swift.Result<Swift.Void, NautilusCollectionCardSDK.NautilusCollectionCardError>) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @objc final public func setMemberSettingCollectionCard(selectedImageID: Foundation.NSNumber?, completion: @escaping (Swift.Bool, Foundation.NSError?) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  final public func getMemberSettingCollectionCard(completion: @escaping (Swift.Result<NautilusCollectionCardSDK.NautilusMemberSettingContents, NautilusCollectionCardSDK.NautilusCollectionCardError>) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @objc final public func getMemberSettingCollectionCard(completion: @escaping (NautilusCollectionCardSDK.NautilusMemberSettingContents?, Foundation.NSError?) -> Swift.Void)
  #endif
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class NautilusMemberSettingContents : ObjectiveC.NSObject {
  final public let selectedImageData: NautilusCollectionCardSDK.NautilusMemberSettingSelectedImageData?
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class NautilusMemberSettingSelectedImageData : ObjectiveC.NSObject {
  final public let imageID: Swift.Int?
  final public let url: Foundation.URL?
  final public let title: Swift.String?
  final public let updateDateTime: Foundation.Date?
  final public let grantedDateTime: Foundation.Date?
  final public let areaAlias: Swift.String?
  @objc deinit
}
public let NautilusCollectionCardErrorDomain: Swift.String
@objc public enum NautilusCollectionCardError : Swift.Int, Swift.Error {
  public var nautilusCollectionCardErrorCode: Swift.Int {
    get
  }
  case unknown
  case connection
  case timedout
  case apiProcessError
  case httpConnection
  case parseFailure
  case userCancelled
  case invalidParamater
  case invalidInstance
  case invalidParameters = 100
  case missingRequiredParameter = 101
  case unexpectedParameterFormat = 102
  case serverError = 200
  case serviceMaintenance = 901
  case unknownAPIService = 903
  case invalidUserPID = 905
  case developerError = 906
  case requiresLoginStatus = 907
  #if compiler(>=5.3) && $NonescapableTypes
  public init?(rawValue: Swift.Int)
  #endif
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class NautilusPublishedContents : ObjectiveC.NSObject {
  final public let hasGranted: Swift.Bool?
  final public let checkinBenefits: NautilusCollectionCardSDK.NautilusPublishedCheckinBenefits?
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class NautilusPublishedCheckinBenefits : ObjectiveC.NSObject {
  final public let areaName: Swift.String?
  final public let areaId: Swift.Int?
  final public let areaAlias: Swift.String?
  final public let checkinTargetType: NautilusCollectionCardSDK.NautilusCollectionCardCheckinTargetType?
  final public let checkinDeviceID: Swift.Int?
  final public let checkinDeviceName: Swift.String?
  final public let checkinSpotID: Swift.Int?
  final public let checkinSpotName: Swift.String?
  final public let checkinPlaceID: Swift.Int?
  final public let checkinPlaceName: Swift.String?
  final public let grantedDateTime: Foundation.Date?
  final public let grantedImagesList: [NautilusCollectionCardSDK.NautilusPublishedGrantedImage]?
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class NautilusPublishedGrantedImage : ObjectiveC.NSObject {
  final public let imageID: Swift.Int?
  final public let title: Swift.String?
  final public let updateDateTime: Foundation.Date?
  @objc deinit
}
extension NautilusCollectionCardSDK.NautilusCollectionCardCheckinTargetType : Swift.Equatable {}
extension NautilusCollectionCardSDK.NautilusCollectionCardCheckinTargetType : Swift.Hashable {}
extension NautilusCollectionCardSDK.NautilusCollectionCardCheckinTargetType : Swift.RawRepresentable {}
extension NautilusCollectionCardSDK.NautilusCollectionCardCheckinDeviceType : Swift.Equatable {}
extension NautilusCollectionCardSDK.NautilusCollectionCardCheckinDeviceType : Swift.Hashable {}
extension NautilusCollectionCardSDK.NautilusCollectionCardCheckinDeviceType : Swift.RawRepresentable {}
extension NautilusCollectionCardSDK.NautilusCollectionCardError : Swift.Equatable {}
extension NautilusCollectionCardSDK.NautilusCollectionCardError : Swift.Hashable {}
extension NautilusCollectionCardSDK.NautilusCollectionCardError : Swift.RawRepresentable {}
