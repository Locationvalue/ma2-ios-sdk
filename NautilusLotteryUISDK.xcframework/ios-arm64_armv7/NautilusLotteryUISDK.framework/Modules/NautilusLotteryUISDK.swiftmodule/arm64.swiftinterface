// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name NautilusLotteryUISDK
import Foundation
import NautilusAnalyticsSDK
import NautilusConfigSDK
import NautilusContainerSDK
import NautilusCoreSDK
import NautilusIdentifySDK
import NautilusImagingSDK
import NautilusLoggingSDK
import NautilusLotterySDK
import NautilusServerTimeSDK
import NautilusUISDK
import Swift
import UIKit
import _Concurrency
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor(unsafe) public class NautilusLotteryDetailViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) weak public var delegate: NautilusLotteryUISDK.NautilusLotteryDetailViewControllerDelegate?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor(unsafe) final public class NautilusLotteryListViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override final public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public protocol NautilusLotteryUIDelegate {
  @objc func lottery(_ lotteryUI: NautilusLotteryUISDK.NautilusLotteryUI, didTap lottery: NautilusLotterySDK.NautilusLotteryInfo, prize: NautilusLotterySDK.NautilusLotteryPrizeInfo, from viewController: UIKit.UIViewController)
}
@_hasMissingDesignatedInitializers @objc final public class NautilusLotteryUI : ObjectiveC.NSObject, NautilusCoreSDK.NautilusFeature {
  @objc public static var configFilename: Swift.String? {
    @objc get
  }
  @objc public static var componentType: NautilusContainerSDK.NautilusComponentType {
    @objc get
  }
  @objc public static var dependencies: [NautilusContainerSDK.NautilusComponentDependency] {
    @objc get
  }
  @objc final public var app: NautilusCoreSDK.NautilusApp
  @objc final public var name: Swift.String?
  weak final public var delegate: NautilusLotteryUISDK.NautilusLotteryUIDelegate?
  @objc public static func initialize(application: NautilusCoreSDK.NautilusApp)
  @objc public static func lotteryUI() -> NautilusLotteryUISDK.NautilusLotteryUI
  @objc(lotteryAppNamed:) public static func lotteryUI(appName: Swift.String) -> NautilusLotteryUISDK.NautilusLotteryUI
  @objc final public func presentLotteryListViewController(in viewController: UIKit.UIViewController)
  @objc final public func instantiateLotteryListViewController() -> NautilusLotteryUISDK.NautilusLotteryListViewController
  @objc final public func presentLotteryDetailViewController(in viewController: UIKit.UIViewController, lottery: NautilusLotterySDK.NautilusLotteryInfo)
  @objc final public func instantiateLotteryDetailViewController(lottery: NautilusLotterySDK.NautilusLotteryInfo) -> NautilusLotteryUISDK.NautilusLotteryDetailViewController
  @objc deinit
}
@objc public protocol NautilusLotteryDetailViewControllerDelegate {
  @objc func lotteryDetail(_ viewController: NautilusLotteryUISDK.NautilusLotteryDetailViewController, didOpen lottery: NautilusLotterySDK.NautilusLotteryInfo, prize: NautilusLotterySDK.NautilusLotteryPrizeInfo)
}
extension UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @_Concurrency.MainActor(unsafe) @objc get
  }
}
