// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target arm64-apple-ios15.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name NautilusPointSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import Foundation
import NautilusConfigSDK
import NautilusContainerSDK
import NautilusCoreSDK
import NautilusIdentifySDK
import NautilusLoggingSDK
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public let NautilusPointErrorDomain: Swift.String
@objc public enum NautilusPointError : Swift.Int, Swift.Error {
  public var nautilusPointErrorCode: Swift.Int {
    get
  }
  case unknown
  case connection
  case timedout
  case apiProcessError
  case httpConnection
  case parseFailure
  case userCancelled
  case invalidParamater
  case invalidInstance
  case invalidParameters = 100
  case missingRequiredParameter = 101
  case unexpectedParameterFormat = 102
  case serverError = 200
  case serviceMaintenance = 901
  case unknownAPIService = 903
  case invalidUserPID = 905
  case developerError = 906
  case requiresLoginStatus = 907
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class NautilusPointNewestExpiration : ObjectiveC.NSObject {
  final public let pointCount: Swift.Int?
  final public let pointExpirationDate: Foundation.Date?
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc final public class NautilusPoint : ObjectiveC.NSObject, NautilusCoreSDK.NautilusFeature {
  @objc public static var configFilename: Swift.String? {
    @objc get
  }
  @objc public static var componentType: NautilusContainerSDK.NautilusComponentType {
    @objc get
  }
  @objc public static var dependencies: [NautilusContainerSDK.NautilusComponentDependency] {
    @objc get
  }
  @objc final public let app: NautilusCoreSDK.NautilusApp
  @objc final public let name: Swift.String?
  @objc final public var featureStatus: NautilusCoreSDK.NautilusFeatureStatus {
    @objc get
  }
  @objc public static func initialize(application: NautilusCoreSDK.NautilusApp, completion: @escaping NautilusCoreSDK.NautilusFeatureInitializationCompletion)
  @objc public static func point() -> NautilusPointSDK.NautilusPoint
  @objc(pointAppNamed:) public static func point(appName: Swift.String) -> NautilusPointSDK.NautilusPoint
  final public func getPointHistoryTotal(completion: @escaping (Swift.Result<(Swift.Int, NautilusPointSDK.NautilusPointNewestExpiration?), NautilusPointSDK.NautilusPointError>) -> Swift.Void)
  @objc final public func getPointHistoryTotal(completion: @escaping (Swift.Int, NautilusPointSDK.NautilusPointNewestExpiration?, Foundation.NSError?) -> Swift.Void)
  final public func getPointHistoryList(searchStartDate: Foundation.Date?, searchEndDate: Foundation.Date?, completion: @escaping (Swift.Result<[NautilusPointSDK.NautilusPointHistory], NautilusPointSDK.NautilusPointError>) -> Swift.Void)
  @objc final public func getPointHistoryList(searchStartDatetime: Foundation.Date?, searchEndDatetime: Foundation.Date?, completion: @escaping ([NautilusPointSDK.NautilusPointHistory]?, Foundation.NSError?) -> Swift.Void)
  final public func getMonthlyPoint(range: Swift.Int?, completion: @escaping (Swift.Result<[NautilusPointSDK.NautilusMonthlyPoint], NautilusPointSDK.NautilusPointError>) -> Swift.Void)
  @objc final public func getMonthlyPoint(range: Foundation.NSNumber?, completion: @escaping ([NautilusPointSDK.NautilusMonthlyPoint]?, Foundation.NSError?) -> Swift.Void)
  final public func exchangePointPrize(couponId: Swift.Int, completion: @escaping (Swift.Result<[NautilusPointSDK.NautilusExchangedPointPrizeCoupon], NautilusPointSDK.NautilusPointError>) -> Swift.Void)
  @objc final public func exchangePointPrize(couponId: Swift.Int, completion: @escaping ([NautilusPointSDK.NautilusExchangedPointPrizeCoupon]?, Foundation.NSError?) -> Swift.Void)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class NautilusExchangedPointPrizeCoupon : ObjectiveC.NSObject {
  final public let couponID: Swift.Int
  final public let couponManageTitle: Swift.String
  final public let couponTitle: Swift.String?
  final public let couponText: Swift.String
  final public let noticeText: Swift.String?
  final public let publishStartDate: Foundation.Date
  final public let publishEndDate: Foundation.Date?
  final public let useStartDate: Foundation.Date?
  final public let useEndDate: Foundation.Date?
  final public let barcode: Swift.String?
  final public let barcodeImageURL: Foundation.URL?
  final public let couponCode: Swift.String?
  final public let maxSheet: Swift.String?
  final public let useType: NautilusPointSDK.NautilusExchangedPointPrizeCouponUseType?
  final public let useLimitHour: Swift.Int?
  final public let categoryIDs: [Swift.Int]?
  final public let sortNo: Swift.Int?
  final public let searchWord: Swift.String?
  final public let couponImages: [NautilusPointSDK.NautilusExchangedPointPrizeCouponImage]?
  final public let useDate: Foundation.Date?
  final public let couponType: NautilusPointSDK.NautilusExchangedPointPrizeCouponType?
  final public let isFavorite: Swift.Bool?
  final public let useCount: Swift.Int?
  final public let alias: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum NautilusExchangedPointPrizeCouponUseType : Swift.Int {
  case notExchange = 0
  case exchange = 1
  case useExchangeCode = 2
  public init(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class NautilusExchangedPointPrizeCouponImage : ObjectiveC.NSObject {
  final public let imagePath: Swift.String?
  final public let aspectRatio: Swift.Double?
  final public let sortNumber: Swift.Int?
  @objc deinit
}
@objc public enum NautilusExchangedPointPrizeCouponType : Swift.Int {
  case common = 1
  case `private` = 2
  case favoriteShop = 3
  case prize = 4
  public init(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class NautilusPointHistory : ObjectiveC.NSObject {
  final public let point: Swift.Int
  final public let pointExpired: Foundation.Date?
  final public let pointHistoryType: NautilusPointSDK.NautilusPointHistoryType
  final public let pointHistoryOperationType: NautilusPointSDK.NautilusPointHistoryOperationType
  final public let pointHistoryTarget: NautilusPointSDK.NautilusPointHistoryTarget
  final public let pointOperationLog: Swift.String
  final public let pointCreatedDate: Foundation.Date
  final public let pointUpdatedDate: Foundation.Date
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum NautilusPointHistoryType : Swift.Int {
  case get = 1
  case spend = 2
  case expired = 3
  public init(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum NautilusPointHistoryOperationType : Swift.Int {
  case api = 1
  case admin = 2
  case external = 3
  public init(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum NautilusPointHistoryTarget : Swift.Int {
  case ocr
  case coupon
  case expired
  public var stringValue: Swift.String {
    get
  }
  public init(rawValue: Swift.String)
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class NautilusMonthlyPoint : ObjectiveC.NSObject {
  final public let date: Foundation.Date?
  final public let totalPoint: Swift.Int
  @objc deinit
}
extension NautilusPointSDK.NautilusPointError : Swift.Equatable {}
extension NautilusPointSDK.NautilusPointError : Swift.Hashable {}
extension NautilusPointSDK.NautilusPointError : Swift.RawRepresentable {}
extension NautilusPointSDK.NautilusExchangedPointPrizeCouponUseType : Swift.Equatable {}
extension NautilusPointSDK.NautilusExchangedPointPrizeCouponUseType : Swift.Hashable {}
extension NautilusPointSDK.NautilusExchangedPointPrizeCouponUseType : Swift.RawRepresentable {}
extension NautilusPointSDK.NautilusExchangedPointPrizeCouponType : Swift.Equatable {}
extension NautilusPointSDK.NautilusExchangedPointPrizeCouponType : Swift.Hashable {}
extension NautilusPointSDK.NautilusExchangedPointPrizeCouponType : Swift.RawRepresentable {}
extension NautilusPointSDK.NautilusPointHistoryType : Swift.Equatable {}
extension NautilusPointSDK.NautilusPointHistoryType : Swift.Hashable {}
extension NautilusPointSDK.NautilusPointHistoryType : Swift.RawRepresentable {}
extension NautilusPointSDK.NautilusPointHistoryOperationType : Swift.Equatable {}
extension NautilusPointSDK.NautilusPointHistoryOperationType : Swift.Hashable {}
extension NautilusPointSDK.NautilusPointHistoryOperationType : Swift.RawRepresentable {}
extension NautilusPointSDK.NautilusPointHistoryTarget : Swift.Equatable {}
extension NautilusPointSDK.NautilusPointHistoryTarget : Swift.Hashable {}
extension NautilusPointSDK.NautilusPointHistoryTarget : Swift.RawRepresentable {}
